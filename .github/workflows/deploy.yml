name: CI & Production Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: "Rebuild all images regardless of path changes"
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  WEB_IMAGE: ghcr.io/toxicwind/effusion-labs
  GATEWAY_IMAGE: ghcr.io/toxicwind/markdown-gateway

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===================================================================
  #  1. DETERMINE WHICH SERVICES HAVE CHANGED
  # ===================================================================
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      gateway: ${{ steps.filter.outputs.gateway }}
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          # Fetches all history, which is required for paths-filter to work correctly.
          fetch-depth: 0

      - name: 🔍 Filter changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            web:
              - '.portainer/**'
              - 'package.json'
              - 'package-lock.json'
              - 'lib/**'
              - 'src/**'
              - 'eleventy.config.mjs'
            gateway:
              - 'markdown_gateway/**'

  # ===================================================================
  #  2. BUILD AND PUSH THE WEB SERVICE IMAGE
  # ===================================================================
  build_web:
    name: 🏗️ Build Web Service
    runs-on: ubuntu-latest
    needs: changes
    # Run this job if web files changed OR if a force rebuild was triggered.
    if: needs.changes.outputs.web == 'true' || github.event.inputs.force_rebuild == 'true'
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      # --- CI steps for the web service ---
      - name: 🧪 Validate frontmatter
        run: |
          npm ci --ignore-scripts
          node scripts/validate-frontmatter.mjs

      - name: ⚡ Smoke tests for direct pushes
        # Only run for direct pushes; PR merges are assumed to be tested already.
        if: github.event.head_commit.message != startsWith('Merge pull request #')
        run: |
          npm ci
          node tools/verify-patch-applied.mjs
          if npm run -s test >/dev/null 2>&1; then npm test; else echo "✅ No 'test' script found, skipping."; fi
          if npm run -s build >/dev/null 2>&1; then npm run build; else echo "✅ No 'build' script found, skipping."; fi

      # --- Docker build steps ---
      - name: 🐳 Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.WEB_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.portainer/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: COMMIT_SHA=${{ github.sha }}

  # ===================================================================
  #  3. BUILD AND PUSH THE GATEWAY SERVICE IMAGE
  # ===================================================================
  build_gateway:
    name: 🏗️ Build Gateway Service
    runs-on: ubuntu-latest
    needs: changes
    # Run this job if gateway files changed OR if a force rebuild was triggered.
    if: needs.changes.outputs.gateway == 'true' || github.event.inputs.force_rebuild == 'true'
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🐳 Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GATEWAY_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./markdown_gateway
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: COMMIT_SHA=${{ github.sha }}

  # ===================================================================
  #  4. TRIGGER PORTAINER TO REDEPLOY
  # ===================================================================
  deploy:
    name: 🚀 Deploy to Portainer
    runs-on: ubuntu-latest
    needs: [build_web, build_gateway]
    # Run if EITHER of the build jobs succeeded.
    # This correctly triggers a deploy if at least one service was rebuilt successfully,
    # but skips deployment if a required build failed.
    if: needs.build_web.result == 'success' || needs.build_gateway.result == 'success'
    steps:
      - name: 📞 Trigger Portainer webhook
        env:
          HOOK: ${{ secrets.PORTAINER_WEBHOOK_EFFUSION }}
        run: |
          echo "Triggering Portainer redeploy..."
          curl --fail --retry-all-errors --retry 5 --retry-delay 3 -X POST "$HOOK"
          echo "✅ Redeploy signal sent."