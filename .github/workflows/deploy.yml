name: 'CI & Production Deployment'

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  WEB_IMAGE: ghcr.io/toxicwind/effusion-labs
  GATEWAY_IMAGE: ghcr.io/toxicwind/markdown-gateway

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  # ===================================================================
  #  BUILD AND PUSH THE WEB SERVICE IMAGE (PRIMARY)
  # ===================================================================
  build_web:
    name: 🏗️ Build Web Service
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v5

      - name: 🔧 Setup Node from .nvmrc (+ cache)
        uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc' # e.g. "24"
          check-latest: true # latest 24.x
          cache: 'npm'

      # --- CI steps for the web service ---
      - name: 🧪 Validate frontmatter
        run: |
          npm ci --ignore-scripts
          node utils/scripts/validation/validate-frontmatter.mjs

      - name: ⚡ Smoke tests for direct pushes
        # Avoids errors on workflow_dispatch where head_commit is absent.
        run: |
          npm ci
          node utils/scripts/validation/verify-patch-applied.mjs
          if npm run -s test >/dev/null 2>&1; then npm test; else echo "✅ No 'test' script found, skipping."; fi
          if npm run -s build >/dev/null 2>&1; then npm run build; else echo "✅ No 'build' script found, skipping."; fi

      # --- Docker build steps ---
      - name: 🐳 Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.WEB_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.portainer/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            COMMIT_SHA=${{ github.sha }}

  # ===================================================================
  #  BUILD THE GATEWAY SERVICE (NOT REQUIRED FOR DEPLOYMENT)
  # ===================================================================
  build_gateway:
    name: 🏗️ Build Gateway Service (Optional)
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v5

      - name: 🐳 Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GATEWAY_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./markdown_gateway
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            COMMIT_SHA=${{ github.sha }}

  # ===================================================================
  #  TRIGGER PORTAINER TO REDEPLOY
  # ===================================================================
  deploy:
    name: 🚀 Deploy to Portainer
    runs-on: ubuntu-latest
    needs: build_web
    if: github.ref_name == 'main'
    steps:
      - name: 📞 Trigger Portainer webhook
        env:
          HOOK: ${{ secrets.PORTAINER_WEBHOOK_EFFUSION }}
        run: |
          echo "Triggering Portainer redeploy..."
          curl --fail --retry-all-errors --retry 5 --retry-delay 3 -X POST "$HOOK"
          echo "✅ Redeploy signal sent."
