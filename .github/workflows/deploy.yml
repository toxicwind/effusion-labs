name: "CI & Production Deployment"

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  WEB_IMAGE: ghcr.io/toxicwind/effusion-labs
  GATEWAY_IMAGE: ghcr.io/toxicwind/markdown-gateway

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  mcp_stack_ci:
    name: 🧪 MCP-Stack CI (No Egress)
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: 📦 Install gateway runtime deps
        working-directory: mcp-stack/gateway
        run: npm ci --ignore-scripts

      - name: 🧰 Start stub sidecars (WireMock)
        run: |
          docker-compose -f mcp-stack/ci/compose.ci.yml up -d flaresolverr searxng
          sleep 3

      - name: 🚦 Smoke + Integration (node, no egress)
        env:
          PROFILE: dev
          LOG_LEVEL: info
          PORT_HTTP: 0
          FLARESOLVERR_URL: http://127.0.0.1:8191
        run: |
          node mcp-stack/tests/smoke.mjs
          node mcp-stack/tests/integration.mjs

      - name: 📈 k6 perf sanity (20 VUs / 10s)
        uses: grafana/setup-k6-action@v1

      - name: ▶️ Run k6 script
        env:
          BASE: http://127.0.0.1:3000
        run: |
          # Start gateway on a fixed port for the perf step
          LOG_LEVEL=info PROFILE=dev PORT_HTTP=3000 node mcp-stack/gateway/server.mjs &
          GW_PID=$!
          # Wait briefly for startup
          sleep 2
          k6 run - <<'EOF'
          import http from "k6/http";
          import { sleep } from "k6";
          export const options = { vus: 20, duration: "10s" };
          export default function () {
            http.get(`${__ENV.BASE}/servers/filesystem/sse`);
            sleep(0.2);
          }
          EOF
          kill $GW_PID || true
  # ===================================================================
  #  BUILD AND PUSH THE WEB SERVICE IMAGE (PRIMARY)
  # ===================================================================
  build_web:
    name: 🏗️ Build Web Service
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      # --- CI steps for the web service ---
      - name: 🧪 Validate frontmatter
        run: |
          npm ci --ignore-scripts
          node scripts/validate-frontmatter.mjs

      - name: ⚡ Smoke tests for direct pushes
        # Avoids errors on workflow_dispatch where head_commit is absent.
        if: github.event_name != 'push' || !startsWith(github.event.head_commit.message, 'Merge pull request #')
        run: |
          npm ci
          node tools/verify-patch-applied.mjs
          if npm run -s test >/dev/null 2>&1; then npm test; else echo "✅ No 'test' script found, skipping."; fi
          if npm run -s build >/dev/null 2>&1; then npm run build; else echo "✅ No 'build' script found, skipping."; fi

      # --- Docker build steps ---
      - name: 🐳 Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.WEB_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.portainer/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            COMMIT_SHA=${{ github.sha }}

  # ===================================================================
  #  BUILD THE GATEWAY SERVICE (NOT REQUIRED FOR DEPLOYMENT)
  # ===================================================================
  build_gateway:
    name: 🏗️ Build Gateway Service (Optional)
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🐳 Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GATEWAY_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./markdown_gateway
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            COMMIT_SHA=${{ github.sha }}

  # ===================================================================
  #  TRIGGER PORTAINER TO REDEPLOY
  # ===================================================================
  deploy:
    name: 🚀 Deploy to Portainer
    runs-on: ubuntu-latest
    needs: build_web
    if: github.ref_name == 'main'
    steps:
      - name: 📞 Trigger Portainer webhook
        env:
          HOOK: ${{ secrets.PORTAINER_WEBHOOK_EFFUSION }}
        run: |
          echo "Triggering Portainer redeploy..."
          curl --fail --retry-all-errors --retry 5 --retry-delay 3 -X POST "$HOOK"
          echo "✅ Redeploy signal sent."
