name: "CI ‚Ä¢ Build ‚Ä¢ Deploy"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  REGISTRY: ghcr.io
  WEB_IMAGE: ghcr.io/toxicwind/effusion-labs
  GATEWAY_IMAGE: ghcr.io/toxicwind/markdown-gateway
  CI: true
  PUPPETEER_SKIP_DOWNLOAD: 'true'
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 'true'
  http_proxy: ''
  https_proxy: ''
  npm_config_proxy: ''
  npm_config_https_proxy: ''
  npm_config_http_proxy: ''

permissions:
  contents: read
  packages: write

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  checks:
    name: "üß™ Checks + Build"
    runs-on: ubuntu-latest
    timeout-minutes: 35
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Restore dataset cache
        uses: actions/cache@v4
        with:
          path: src/content/projects/lv-images/generated
          key: dataset-${{ runner.os }}-${{ hashFiles('src/content/projects/lv-images/generated/lv.bundle.json') }}
          restore-keys: |
            dataset-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci

      - name: Verify patches
        run: npm run verify:patches

      - name: Lint
        run: npm run lint

      - name: Soft quality signals
        run: |
          set +e
          mkdir -p reports
          summary="### ‚öôÔ∏è Soft quality checks\n\n"
          run_soft() {
            local label="$1"
            shift
            echo "::group::${label}"
            "$@" &>"reports/${label}.log"
            local status=$?
            if [[ $status -eq 0 ]]; then
              summary+="- ‚úÖ ${label}\n"
            else
              summary+="- ‚ö†Ô∏è ${label}\n"
            fi
            tail -n 200 "reports/${label}.log" || true
            echo "::endgroup::"
            return $status
          }
          run_soft "markdown-link-check" npm run lint:links
          run_soft "knip" npm run knip:ci
          printf "%b" "$summary" >> "$GITHUB_STEP_SUMMARY"
          exit 0

      - name: Tests
        run: npm test

      - name: Build (offline strict)
        run: npm run build:ci

      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: _site/
          retention-days: 3

  build_web:
    name: "üê≥ Build & Push ‚Ä¢ Web"
    runs-on: ubuntu-latest
    needs: checks
    if: github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.WEB_IMAGE }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build & push web image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.portainer/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=portainer-web
          cache-to: type=gha,mode=max,scope=portainer-web
          platforms: linux/amd64
          build-args: |
            COMMIT_SHA=${{ github.sha }}

  build_gateway:
    name: "üê≥ Build ‚Ä¢ Gateway (if changed)"
    runs-on: ubuntu-latest
    needs: checks
    if: github.ref_name == 'main'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect gateway changes
        id: gw
        run: |
          if git diff --quiet HEAD^ HEAD -- ./markdown_gateway; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Buildx
        if: steps.gw.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: steps.gw.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        if: steps.gw.outputs.changed == 'true'
        id: gwmeta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GATEWAY_IMAGE }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & push gateway image
        if: steps.gw.outputs.changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./markdown_gateway
          push: true
          tags: ${{ steps.gwmeta.outputs.tags }}
          labels: ${{ steps.gwmeta.outputs.labels }}
          cache-from: type=gha,scope=portainer-gateway
          cache-to: type=gha,mode=max,scope=portainer-gateway
          platforms: linux/amd64
          build-args: |
            COMMIT_SHA=${{ github.sha }}

  deploy:
    name: "üöÄ Deploy (Portainer)"
    runs-on: ubuntu-latest
    needs: build_web
    if: github.ref_name == 'main'
    steps:
      - name: Trigger Portainer redeploy
        env:
          HOOK: ${{ secrets.PORTAINER_WEBHOOK_EFFUSION }}
        run: |
          echo "Triggering Portainer redeploy..."
          curl --fail --retry-all-errors --retry 5 --retry-delay 3 -X POST "$HOOK"
          echo "‚úÖ Redeploy signal sent."

  commitlint_soft:
    if: github.event_name == 'pull_request' && vars.ENABLE_COMMITLINT == 'true'
    name: "üìù Commit style (soft)"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci
      - name: Commitlint (soft)
        run: npx commitlint --from="${{ github.event.pull_request.base.sha }}" --to=HEAD || true

  reviewdog_eslint:
    if: github.event_name == 'pull_request' && vars.ENABLE_REVIEWDOG == 'true'
    name: "üê∂ ESLint (annotations)"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci
      - run: npm run lint -- --format json --output-file eslint-report.json || true
      - uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          fail_on_error: "false"
          eslint_input: eslint-report.json
          eslint_reporter: json
          filter_mode: added
          path: .
          level: info
