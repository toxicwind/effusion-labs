name: "CI ‚Ä¢ Build ‚Ä¢ Deploy"

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  WEB_IMAGE: ghcr.io/toxicwind/effusion-labs
  GATEWAY_IMAGE: ghcr.io/toxicwind/markdown-gateway
  CI: true
  PUPPETEER_SKIP_DOWNLOAD: 'true'
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 'true'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 'true'
  http_proxy: ''
  https_proxy: ''
  npm_config_proxy: ''
  npm_config_https_proxy: ''
  npm_config_http_proxy: ''

permissions:
  contents: read
  packages: write

defaults:
  run:
    shell: bash --noprofile --norc -eo pipefail

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  quality:
    name: "‚úÖ Quality (soft)"
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üîß Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          check-latest: true
          cache: npm
          cache-dependency-path: package-lock.json

      - name: ‚ôªÔ∏è Restore node_modules
        id: node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('.nvmrc', 'package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: üì¶ Install dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: üßπ ESLint
        id: eslint
        continue-on-error: true
        run: |
          mkdir -p reports
          npm run lint:js | tee reports/eslint.txt || true
          {
            echo "### üßπ ESLint"
            echo
            echo "<details><summary>Open log</summary>"
            echo
            echo '```text'
            tail -n 400 reports/eslint.txt
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: üîó Link check
        id: linkcheck
        continue-on-error: true
        run: |
          markdown-link-check -c oneoff/link-check.config.json README.md | tee reports/linkcheck.txt || true
          {
            echo "### üîó Link check"
            echo
            echo "<details><summary>Open log</summary>"
            echo
            echo '```text'
            tail -n 400 reports/linkcheck.txt
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: üß¨ Knip (dead code)
        id: knip
        continue-on-error: true
        run: |
          npm run dead:ci | tee reports/knip.txt || true
          {
            echo "### üß¨ Knip"
            echo
            echo "<details><summary>Open log</summary>"
            echo
            echo '```text'
            tail -n 400 reports/knip.txt
            echo '```'
            echo "</details>"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: üìé Upload quality reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: reports/
          if-no-files-found: ignore

  tests:
    name: "üß™ Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: quality
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üîß Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          check-latest: true
          cache: npm
          cache-dependency-path: package-lock.json

      - name: ‚ôªÔ∏è Restore node_modules
        id: node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('.nvmrc', 'package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: üì¶ Install dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: üóÉÔ∏è Hydrate dataset bundle
        run: npm run dataset:hydrate -- --keep

      - name: üß™ Run integration suite
        run: npm test

  static_build:
    name: "üèóÔ∏è Static build"
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: tests
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üîß Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          check-latest: true
          cache: npm
          cache-dependency-path: package-lock.json

      - name: ‚ôªÔ∏è Restore node_modules
        id: node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('.nvmrc', 'package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: üì¶ Install dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: üèóÔ∏è Offline CI build
        run: npm run ci:build

      - name: üì¶ Upload _site artifact (PRs)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: site-ci
          path: _site/
          if-no-files-found: ignore

  build_web:
    name: "üê≥ Build ‚Ä¢ Web image"
    runs-on: ubuntu-latest
    needs: static_build
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üê≥ Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.WEB_IMAGE }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: üèóÔ∏è Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./.portainer/Dockerfile
          push: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            COMMIT_SHA=${{ github.sha }}

  build_gateway:
    name: "üê≥ Build ‚Ä¢ Gateway"
    runs-on: ubuntu-latest
    needs: static_build
    if: github.ref_name == 'main'
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Detect gateway changes
        id: gw
        run: |
          if git diff --quiet HEAD^ HEAD -- ./markdown_gateway; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: üê≥ Setup Buildx
        if: steps.gw.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: üîë Login to GHCR
        if: steps.gw.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Docker metadata
        if: steps.gw.outputs.changed == 'true'
        id: gateway-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GATEWAY_IMAGE }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üèóÔ∏è Build & push gateway
        if: steps.gw.outputs.changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./markdown_gateway
          push: true
          tags: ${{ steps.gateway-meta.outputs.tags }}
          labels: ${{ steps.gateway-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            COMMIT_SHA=${{ github.sha }}

  deploy:
    name: "üöÄ Portainer deploy"
    runs-on: ubuntu-latest
    needs: build_web
    if: github.ref_name == 'main'
    steps:
      - name: üìû Trigger Portainer webhook
        env:
          HOOK: ${{ secrets.PORTAINER_WEBHOOK_EFFUSION }}
        run: |
          echo "Triggering Portainer redeploy..."
          curl --fail --retry-all-errors --retry 5 --retry-delay 3 -X POST "$HOOK"
          echo "‚úÖ Redeploy signal sent."

  commitlint_soft:
    if: github.event_name == 'pull_request' && vars.ENABLE_COMMITLINT == 'true'
    name: "üìù Commit style (soft)"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json

      - name: ‚ôªÔ∏è Restore node_modules
        id: node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('.nvmrc', 'package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: üì¶ Install dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Commitlint (soft)
        run: npx commitlint --from="${{ github.event.pull_request.base.sha }}" --to=HEAD || true

  reviewdog_eslint:
    if: github.event_name == 'pull_request' && vars.ENABLE_REVIEWDOG == 'true'
    name: "üê∂ ESLint (annotations)"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: package-lock.json

      - name: ‚ôªÔ∏è Restore node_modules
        id: node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('.nvmrc', 'package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: üì¶ Install dependencies
        if: steps.node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: üîç ESLint JSON report
        run: npx eslint "src/**/*.{js,mjs,ts,tsx}" "tools/**/*.mjs" "mcp-stack/**/*.mjs" eleventy.config.mjs -f json -o eslint-report.json || true

      - uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check
          fail_on_error: "false"
          eslint_input: eslint-report.json
          eslint_reporter: json
          filter_mode: added
          path: .
          level: info
