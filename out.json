[{"path":"bin/_lib.sh","content":"#!/usr/bin/env bash\nset -euo pipefail\n\nREPO_ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/..\" && pwd)\"\nTOOLS_DIR=\"$REPO_ROOT/.tools\"\n\n# On Codex universal, container runs as root; no sudo needed\ncan_sudo() { return 1; }\n\n# Remove REPO_ROOT/bin from PATH when resolving fallback candidates\npath_without_repo_bin() {\n  local new_path=\"\" part\n  IFS=':' read -ra parts <<<\"${PATH:-}\"\n  for part in \"${parts[@]}\"; do\n    [[ \"$part\" == \"$REPO_ROOT/bin\" ]] && continue\n    new_path+=\"${new_path:+:}$part\"\n  done\n  printf '%s' \"$new_path\"\n}\n\n# Retry exec against a list of fallback executables\nretry_exec() {\n  local all=(\"$@\") args=() cands=() idx\n  for idx in \"${!all[@]}\"; do [[ \"${all[idx]}\" == \"--\" ]] && break; done\n  args=(\"${all[@]:0:idx}\")\n  cands=(\"${all[@]:idx+1}\")\n\n  local clean_path; clean_path=\"$(path_without_repo_bin)\"\n  local cmd resolved\n  for cmd in \"${cands[@]}\"; do\n    if [[ -x \"$cmd\" ]]; then exec \"$cmd\" \"${args[@]}\"; fi\n    if [[ -n \"$clean_path\" ]]; then\n      resolved=\"$(PATH=\"$clean_path\" command -v \"$cmd\" 2>/dev/null||true)\"\n    else\n      resolved=\"$(command -v \"$cmd\" 2>/dev/null||true)\"\n    fi\n    [[ -n \"$resolved\" ]] && exec \"$resolved\" \"${args[@]}\"\n  done\n  return 1\n}\n\n# Locate Python for GitHub asset fetcher\n_python_bin() { command -v python3 2>/dev/null || command -v python 2>/dev/null || true; }\n\n# Extract major version number from \"vX.Y.Z\"\n_version_major() {\n  local v=\"${1#v}\" maj=\"${v%%.*}\"\n  [[ \"$maj\" =~ ^[0-9]+$ ]] && printf '%s' \"$maj\"\n}\n\n# Ensure Node 22+ using built-in NVM\nensure_node_runtime() {\n  export NVM_DIR=/root/.nvm\n  source \"$NVM_DIR/nvm.sh\"\n  nvm use 22 >/dev/null\n}\n\n# Stub for Rust target detection\n_detect_rust_target() { uname -s; }\n\n# Specific shims remain unchanged and rely on retry_exec\n"},{"path":"bin/bat","content":"#!/usr/bin/env bash\nset -euo pipefail\n. \"$(dirname \"$0\")/_lib.sh\"\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/bat\" \\\n  \"$TOOLS_DIR/bat/bat\" \\\n  bat \\\n  batcat\n\necho \"❌ bat not available; ensure devDeps installed or provide system 'bat'.\" >&2\nexit 127\n"},{"path":"bin/fd","content":"#!/usr/bin/env bash\n# fd shim — autonomous, non-hijacking repairs for LLM-driven invocations\n# - ONLY rewrites CLI args and execs fd (no piping, no post-processing)\n# - Fixed safe defaults (no env toggles): max-depth=6, one-file-system, color=never\n# - Removes/transforms exec modes (-x / -X) into safe listing and emits diagnostics to stderr\n# - Conservative: warns visibly about hidden/no-ignore/follow-symlink requests\nset -Eeuo pipefail\n. \"$(cd \"$(dirname \"$0\")\" && pwd)/_lib.sh\"\n\nif ! ensure_fd_tool; then\n  printf '%s\\n' \"fd-shim: warning: unable to provision fd automatically; falling back to system resolution.\" >&2\nfi\n\n# ---------- fixed safety knobs (no env toggles) ----------\nSAFE_MAX_DEPTH=6          # limit directory recursion to reduce scan blast radius\nINJECTED_FLAGS=( --max-depth \"$SAFE_MAX_DEPTH\" --one-file-system --color=never )\n\n# ---------- parse & repair arguments ----------\norig=( \"$@\" )\nsanitized=()\nshow_change=0\n# capture whether user explicitly requested JSON-like machine mode (fd has no JSON, but -0 indicates pipe intent)\nhas_print0=0\n# We will remove -x/-X (exec) as an automatic hardening step (transformed to safe listing).\n# We will preserve -0/--print0 when present (used for safe piping).\ni=0\nwhile (( i < ${#orig[@]} )); do\n  a=\"${orig[i]}\"\n  case \"$a\" in\n    -x|--exec)\n      # per fd docs -x executes command per result (parallel); risky to let an LLM craft destructive commands\n      printf '%s\\n' \"fd-shim: removed exec flag '-x/--exec' for safety; invocation will only list matches. If you intended to run commands, run them explicitly after review.\" >&2\n      show_change=1\n      # skip template tokens until semicolon-terminated or end-of-args:\n      # fd -x cmd {} \\;  OR fd -x cmd {} ';'  OR fd -x sh -c '...' etc. We conservatively skip next token if it's not starting with '-' (best-effort).\n      # In practice we drop the flag and any immediate token that looks like the command (best-effort).\n      if (( i+1 < ${#orig[@]} )); then\n        # skip one following token (command template); cannot robustly parse arbitrary templates without execing - so we drop one token safely.\n        ((i += 1))\n      fi\n      ;;\n    -X|--exec-batch)\n      printf '%s\\n' \"fd-shim: removed batch-exec flag '-X/--exec-batch' to avoid passing many paths into external commands. Listing only.\" >&2\n      show_change=1\n      # if a command token follows, skip one token to avoid misinterpreting it as a path later\n      if (( i+1 < ${#orig[@]} )); then ((i += 1)); fi\n      ;;\n    -H|--hidden)\n      # visible request to include hidden files; allowed but warn because it increases output surface\n      printf '%s\\n' \"fd-shim: warning: '--hidden' requested; scanning hidden files (this may increase result size).\" >&2\n      show_change=1\n      sanitized+=( \"$a\" )\n      ;;\n    -I|--no-ignore)\n      # show-danger but honor; scanning ignored files can include node_modules etc. keep but warn\n      printf '%s\\n' \"fd-shim: warning: '--no-ignore' requested; ignoring .gitignore/.fdignore (this may include large paths like node_modules).\" >&2\n      show_change=1\n      sanitized+=( \"$a\" )\n      ;;\n    -L|--follow)\n      # following symlinks can traverse outside repo or create loops; warn but allow with max-depth enforced\n      printf '%s\\n' \"fd-shim: warning: '--follow' requested; symlinks will be followed but traversal depth is limited to ${SAFE_MAX_DEPTH}.\" >&2\n      show_change=1\n      sanitized+=( \"$a\" )\n      ;;\n    -0|--print0)\n      has_print0=1\n      sanitized+=( \"$a\" )\n      ;;\n    --color=*)\n      # canonicalize color: we will set --color=never; skip user color flags in sanitized list\n      printf '%s\\n' \"fd-shim: normalizing color output to --color=never for deterministic results.\" >&2\n      show_change=1\n      ;;\n    --help|--version|-h|-V)\n      # pass trivial flags through untouched\n      sanitized+=( \"$a\" )\n      ;;\n    *)\n      sanitized+=( \"$a\" )\n      ;;\n  esac\n  ((i += 1))\ndone\n\n# build final args: inject safety flags unless user explicitly used --print0 (we still inject)\nfinal_args=()\nfinal_args+=( \"${INJECTED_FLAGS[@]}\" )\nfinal_args+=( \"${sanitized[@]}\" )\n\nif [[ \"$show_change\" -eq 1 ]]; then\n  printf '%s\\n' \"fd-shim: executing fd with safe defaults (max-depth=${SAFE_MAX_DEPTH}, one-file-system, color=never).\" >&2\nfi\n\n# exec the real fd; no post-processing, no piping; shim only rewrites CLI\nretry_exec \"${final_args[@]}\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/fd\" \\\n  \"$REPO_ROOT/node_modules/.bin/fdfind\" \\\n  \"$TOOLS_DIR/fd/fd\" \\\n  \"$TOOLS_DIR/fd/fdfind\" \\\n  fd \\\n  fdfind\n\necho \"❌ fd not available; ensure devDeps installed or provide a system 'fd'.\" >&2\nexit 127\n"},{"path":"bin/jq","content":"#!/usr/bin/env bash\nset -euo pipefail\n. \"$(dirname \"$0\")/_lib.sh\"\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/jq\" \\\n  \"$TOOLS_DIR/jq/jq\" \\\n  jq\n\nif [[ ! -x \"$TOOLS_DIR/jq/jq\" ]]; then\n  mkdir -p \"$TOOLS_DIR/jq\"\n  curl -fsSL https://github.com/jqlang/jq/releases/latest/download/jq-linux-amd64 \\\n    -o \"$TOOLS_DIR/jq/jq\" && chmod +x \"$TOOLS_DIR/jq/jq\"\nfi\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/jq\" \\\n  \"$TOOLS_DIR/jq/jq\" \\\n  jq\n\necho \"❌ jq not available; install or provide system 'jq'.\" >&2\nexit 127\n"},{"path":"bin/mtemp","content":"#!/usr/bin/env bash\n# mktemp shim for LLM contexts.\nset -euo pipefail\n. \"$(dirname \"$0\")/_lib.sh\"\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/mktemp\" \\\n  \"$TOOLS_DIR/mktemp/mktemp\" \\\n  mktemp\n\necho \"❌ mktemp not available; ensure coreutils installed.\" >&2\nexit 127\n"},{"path":"bin/node","content":"#!/usr/bin/env bash\nset -euo pipefail\n. \"$(dirname \"$0\")/_lib.sh\"\n\nensure_node_runtime\nexport PATH=\"$REPO_ROOT/bin:$PATH\"\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/node\" \\\n  node\n"},{"path":"bin/npm","content":"#!/usr/bin/env bash\nset -euo pipefail\n. \"$(dirname \"$0\")/_lib.sh\"\n\nensure_node_runtime\nexport PATH=\"$REPO_ROOT/bin:$PATH\"\n\nretry_exec \"${@}\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/npm\" \\\n  npm\n"},{"path":"bin/prettier","content":"#!/usr/bin/env bash\nset -euo pipefail\n. \"$(dirname \"$0\")/_lib.sh\"\n\n# Ensure local prettier\n[[ -x node_modules/.bin/prettier ]] || npm install --save-dev --save-exact prettier@3\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/prettier\" \\\n  prettier\n"},{"path":"bin/rg","content":"#!/usr/bin/env bash\n# rg shim — safely repair and constrain ripgrep invocations in LLM-driven contexts.\n# - Strips risky flags that spawn subprocesses or emit excessive data.\n# - Injects deterministic safety caps: max-columns, max-filesize, DFA/regex limits, line-buffered.\n# - Honors --json by not injecting formatting flags when machine output is requested.\nset -Eeuo pipefail\n\n# Load shared helper functions (retry_exec, path resolution)\n. \"$(cd \"$(dirname \"$0\")\" && pwd)/_lib.sh\"\n\n# ---------- fixed safety knobs (no env toggles) ----------\nMAX_COLUMNS=4000        # safe atomic writes under PIPE_BUF\nMAX_FILESIZE=10M        # skip files larger than 10MB\nDFA_LIMIT=10M           # cap automaton size\nREGEX_LIMIT=8M          # cap regex processing\nINJECTED_FLAGS=(        # always inject unless --json\n  --max-columns \"$MAX_COLUMNS\"\n  --max-columns-preview\n  --max-filesize \"$MAX_FILESIZE\"\n  --dfa-size-limit \"$DFA_LIMIT\"\n  --regex-size-limit \"$REGEX_LIMIT\"\n  --line-buffered\n  --no-heading\n  --color=never\n)\n\n# ---------- argument parse & autonomous repair ----------\norig=( \"$@\" )\nsanitized=()\nshowed_change=0\nhas_json=0\n\nfor ((i=0; i<${#orig[@]}; i++)); do\n  a=\"${orig[i]}\"\n  case \"$a\" in\n    --pre|--pre=*)\n      printf '%s\\n' \"rg-shim: removed '$a' to avoid per-file preprocessors.\" >&2\n      showed_change=1\n      # skip attached value if space-separated\n      if [[ \"$a\" == \"--pre\" && $((i+1)) -lt ${#orig[@]} ]]; then\n        ((i++))\n      fi\n      ;;\n    --pre-glob|--pre-glob=*)\n      printf '%s\\n' \"rg-shim: removed '$a' (works with --pre) to avoid wide preprocessor dispatch.\" >&2\n      showed_change=1\n      if [[ \"$a\" == \"--pre-glob\" && $((i+1)) -lt ${#orig[@]} ]]; then\n        ((i++))\n      fi\n      ;;\n    --passthru)\n      printf '%s\\n' \"rg-shim: removed '--passthru' to avoid unbounded output.\" >&2\n      showed_change=1\n      ;;\n    -a|--text)\n      printf '%s\\n' \"rg-shim: removed '$a' (binary-as-text) to prevent gibberish dumps.\" >&2\n      showed_change=1\n      ;;\n    --color=always|--color=auto|--color=never)\n      # normalize color later\n      printf '%s\\n' \"rg-shim: overriding '$a' to --color=never.\" >&2\n      showed_change=1\n      ;;\n    --json)\n      sanitized+=( \"$a\" )\n      has_json=1\n      ;;\n    --help|--version|-h|-V)\n      sanitized+=( \"$a\" )\n      ;;\n    -*)\n      sanitized+=( \"$a\" )\n      ;;\n    *)\n      sanitized+=( \"$a\" )\n      ;;\n  esac\ndone\n\n# Build final arguments\nfinal_args=()\n\n# Only inject safety flags when not JSON mode\nif [[ $has_json -eq 0 ]]; then\n  final_args+=( \"${INJECTED_FLAGS[@]}\" )\nfi\n\n# Append sanitized user arguments\nfinal_args+=( \"${sanitized[@]}\" )\n\n# Log if modifications occurred\nif [[ $showed_change -eq 1 ]]; then\n  printf '%s\\n' \"rg-shim: injected safety defaults (max-columns=${MAX_COLUMNS}, max-filesize=${MAX_FILESIZE}, dfa=${DFA_LIMIT}, regex=${REGEX_LIMIT}, line-buffered).\" >&2\nfi\n\n# Execute ripgrep via our retry_exec fallback\nretry_exec \"${final_args[@]}\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/rg\" \\\n  \"$REPO_ROOT/node_modules/.bin/ripgrep\" \\\n  \"$TOOLS_DIR/rg/rg\" \\\n  \"$TOOLS_DIR/rg/ripgrep\" \\\n  rg \\\n  ripgrep\n\n# If exec returns, ripgrep was not found\necho \"❌ ripgrep not available; please install ripgrep or ensure locally via npm install ripgrep.\" >&2\nexit 127\n"},{"path":"bin/sd","content":"#!/usr/bin/env bash\n# sd shim — provision sd or fallback.\nset -euo pipefail\n. \"$(dirname \"$0\")/_lib.sh\"\n\nif ! ensure_sd_tool; then\n  printf '%s\\n' \"sd-shim: warning: cannot provision sd; falling back.\" >&2\nfi\n\nPATH_NO_BIN=\"$(path_without_repo_bin)\"\nREAL=\"$(PATH=\"$PATH_NO_BIN\" command -v sd 2>/dev/null||true)\"\ncands=( \"$REPO_ROOT/node_modules/.bin/sd\" \"$TOOLS_DIR/sd/sd\" \"$REAL\" sd )\n\nretry_exec \"$@\" -- \"${cands[@]}\"\n\necho \"❌ sd not found.\" >&2\nexit 127\n"},{"path":"bin/shtap","content":"#!/usr/bin/env bash\nset -Eeuo pipefail\nplan(){ echo \"1..$1\"; }\nok(){ echo \"ok $1 - $*\"; }\nnot_ok(){ echo \"not ok $1 - $*\"; }\nexpect(){ eval \"${@:2}\" && ok \"$1\" || { not_ok \"$1\"; exit 1; }; }\n"},{"path":"bin/tree","content":"#!/usr/bin/env bash\nset -euo pipefail\n. \"$(dirname \"$0\")/_lib.sh\"\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/tree\" \\\n  \"$TOOLS_DIR/tree/tree\" \\\n  tree\n\necho \"❌ tree not found.\" >&2\nexit 127\n"},{"path":"bin/yq","content":"#!/usr/bin/env bash\nset -euo pipefail\n. \"$(dirname \"$0\")/_lib.sh\"\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/yq\" \\\n  \"$TOOLS_DIR/yq/yq\" \\\n  yq\n\nif [[ ! -x \"$TOOLS_DIR/yq/yq\" ]]; then\n  mkdir -p \"$TOOLS_DIR/yq\"\n  curl -fsSL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \\\n    -o \"$TOOLS_DIR/yq/yq\" && chmod +x \"$TOOLS_DIR/yq/yq\"\nfi\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/yq\" \\\n  \"$TOOLS_DIR/yq/yq\" \\\n  yq\n\necho \"❌ yq not found.\" >&2\nexit 127\n"}]
