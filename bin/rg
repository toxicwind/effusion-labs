#!/usr/bin/env bash
# rg shim — autonomously repair/soften dangerous flags so rg emits safe output.
# - DOES NOT pipe or post-process rg output. Only rewrites CLI args and execs rg.
# - Fixed safety values (no env toggles): max-columns=4000, max-filesize=10M, dfa/regex caps, line-buffered.
set -Eeuo pipefail
. "$(cd "$(dirname "$0")" && pwd)/_lib.sh"

_find_rg() {
  local c
  for c in \
    "$REPO_ROOT/node_modules/.bin/rg" \
    "$REPO_ROOT/node_modules/.bin/ripgrep" \
    "$TOOLS_DIR/rg/rg" \
    /usr/bin/rg \
    /usr/local/bin/rg \
    "$(command -v rg 2>/dev/null || true)"
  ; do
    [[ -n "${c}" && -x "${c}" ]] && { printf '%s\n' "$c"; return 0; }
  done
  return 1
}

RG_BIN="$(_find_rg)" || {
  echo "❌ ripgrep (rg) not available; install or provide 'rg' on PATH." >&2
  exit 127
}

# ---------- fixed safety knobs (no env toggles) ----------
MAX_COLUMNS=4000      # keep below typical PIPE_BUF (4096) to avoid huge atomic writes
MAX_FILESIZE=10M
DFA_LIMIT=10M
REGEX_LIMIT=8M
# These flags will always be injected (unless user requested --json)
INJECTED_FLAGS=( \
  --max-columns "$MAX_COLUMNS" \
  --max-columns-preview \
  --max-filesize "$MAX_FILESIZE" \
  --dfa-size-limit "$DFA_LIMIT" \
  --regex-size-limit "$REGEX_LIMIT" \
  --line-buffered \
  --no-heading \
  --color=never \
)

# ---------- argument parse & autonomous repair ----------
orig=( "$@" )
sanitized=()
showed_change=0
# We will keep --json untouched (machine outputs should not be modified).
for ((i=0;i<${#orig[@]};i++)); do
  a="${orig[i]}"

  case "$a" in
    --pre|--pre=*)
      # --pre runs per-file preprocessors (can spawn many processes / huge io). Remove but inform.
      printf '%s\n' "rg-shim: removed risky flag '--pre*' to avoid per-file preprocessors; proceeding without it." >&2
      showed_change=1
      # drop the whole token; if next token is value and this was space-separated form, also drop
      if [[ "$a" == "--pre" ]]; then
        # skip the next token if present
        ((i++))
      fi
      ;;
    --pre-glob|--pre-glob=*)
      printf '%s\n' "rg-shim: removed '--pre-glob*' (works with --pre) to avoid wide preprocessor dispatch." >&2
      showed_change=1
      if [[ "$a" == "--pre-glob" ]]; then ((i++)); fi
      ;;
    --passthru)
      # --passthru would output both matching and non-matching lines verbatim (can be huge)
      printf '%s\n' "rg-shim: removed '--passthru' to avoid unbounded file output; running normal search instead." >&2
      showed_change=1
      ;;
    -a|--text)
      # -a treats binaries as text — can dump binary gibberish.
      printf '%s\n' "rg-shim: removed '-a/--text' (binary-as-text). Keeping binary detection and a file-size cap instead." >&2
      showed_change=1
      ;;
    --color=always|--color=auto|--color=never)
      # normalize color to never to avoid SGR escape noise in LLM contexts (deterministic).
      printf '%s\n' "rg-shim: overriding color flags to --color=never for stable output." >&2
      showed_change=1
      # do not append user's color flag; we'll append our canonical color later
      ;;
    --json)
      # keep JSON untouched; do not inject max-columns because JSON output is machine-format
      sanitized+=( "$a" )
      ;;
    --help|--version|-h|--version)
      # pass help/version straight through without changes
      sanitized+=( "$a" )
      ;;
    *)
      sanitized+=( "$a" )
      ;;
  esac
done

# If user asked for --json, do not inject formatting flags that alter textual output semantics.
inject_formatting=1
for tok in "${sanitized[@]}"; do
  if [[ "$tok" == "--json" ]]; then inject_formatting=0; break; fi
done

# Build final argv
final_args=()
if [[ "$inject_formatting" -eq 1 ]]; then
  final_args+=( "${INJECTED_FLAGS[@]}" )
fi
# append the user's (sanitized) arguments
final_args+=( "${sanitized[@]}" )

# If we removed/modified things, show a short summary that an LLM/human can see.
if [[ "$showed_change" -eq 1 ]]; then
  printf '%s\n' "rg-shim: executed with safe defaults (max-columns=${MAX_COLUMNS}, max-filesize=${MAX_FILESIZE}, dfa=${DFA_LIMIT}, regex=${REGEX_LIMIT}, line-buffered)." >&2
fi

# Final exec -> do not pipe, do not post-process; hand control to rg with repaired args.
exec "${RG_BIN}" "${final_args[@]}"
