/* public/css/app.css
   Tailwind v4 + daisyUI v5 via Vite (CSS-first)
   Single entry: includes tokens + Hyperbrut layers. */

@import 'tailwindcss';
@plugin "@tailwindcss/typography";
@plugin "daisyui";

/* Map Tailwind's `dark:` variant to daisyUI's data-theme switch */
@custom-variant dark (&:where([data-theme='dim'], [data-theme='dim'] *));

/* -------------------- */
/* Site tokens in CSS   */
/* -------------------- */

/* Light/Dark color tokens */
/* Do not force a global color-scheme here; let theme blocks decide. */
:root {
  --color-bg: 42 48 60;
  --color-surface: 36 41 51;
  --color-text: 178 204 214;
  --color-primary: 159 232 141;
  --color-border: 32 37 46;
  --color-code-bg: 36 41 51;
  --color-code-text: 178 204 214;
}
html[data-theme='dim'] {
  color-scheme: dark;
  --color-bg: 42 48 60;
  --color-surface: 36 41 51;
  --color-text: 178 204 214;
  --color-primary: 159 232 141;
  --color-border: 32 37 46;
  --color-code-bg: 36 41 51;
  --color-code-text: 178 204 214;
}
html[data-theme='silk'] {
  color-scheme: light;
  --color-bg: 247 245 243;
  --color-surface: 243 237 233;
  --color-text: 75 71 67;
  --color-primary: 28 28 41;
  --color-border: 226 221 217;
  --color-code-bg: 243 237 233;
  --color-code-text: 75 71 67;
}

/* Spectrum + layout tokens */
:root {
  --page-w: min(110rem, 92vw);
  --spec-a: #00e0ff;
  --spec-b: #9aff00;
  --spec-c: #ff1cf7;
  --spec-d: #ffc700;
  --spectrum: linear-gradient(
    180deg,
    var(--spec-a),
    var(--spec-b) 33%,
    var(--spec-c) 66%,
    var(--spec-d)
  );
  --spectrum-x: linear-gradient(90deg, var(--spec-a), var(--spec-c));
  --spec-alpha: 0.35;
  --spec-rail-w: 3px;
  --spec-underline-w: 2px;
  --spec-chip-bw: 2px;

  /* Overlay z-index (below header/nav = 40) */
  --mschf-z: 30;

  /* Small global niceties */
  --radius: 0.5rem;
}
@media (min-width: 1920px) {
  :root {
    --page-w: min(130rem, 88vw);
  }
}
@media (min-width: 2560px) {
  :root {
    --page-w: min(150rem, 84vw);
  }
}
@media (min-width: 3840px) {
  :root {
    --page-w: min(168rem, 78vw);
  }
}

/* Smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* -------------------- */
/* Base layer           */
/* -------------------- */
@layer base {
  *,
  ::before,
  ::after {
    box-sizing: border-box;
  }
  html,
  body {
    height: 100%;
  }
  body {
    margin: 0;
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
    /* Ensure base colors follow the active daisyUI theme */
    @apply bg-base-100 text-base-content;
  }

  code {
    @apply bg-base-300 rounded px-1 font-mono text-sm;
  }
  /* Ensure typography inverts when data-theme=dark is active */
  html[data-theme='dim'] .prose {
    @apply prose-invert;
  }
}

/* -------------------- */
/* Utilities            */
/* -------------------- */
@layer utilities {
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  @keyframes hb-float {
    0% {
      transform: translate3d(
          0,
          calc(var(--hb-float-base-y, 0px) - var(--hb-float-range, 24px) / 2),
          0
        )
        rotate3d(0, 0, 1, calc(var(--hb-float-tilt, 2deg) * -1));
    }
    25% {
      transform: translate3d(
          0,
          calc(
            var(--hb-float-base-y, 0px) + var(--hb-float-range, 24px) * 0.15
          ),
          0
        )
        rotate3d(0, 0, 1, calc(var(--hb-float-tilt, 2deg) * -0.35));
    }
    50% {
      transform: translate3d(
          0,
          calc(var(--hb-float-base-y, 0px) + var(--hb-float-range, 24px) / 2),
          0
        )
        rotate3d(0, 0, 1, var(--hb-float-tilt, 2deg));
    }
    75% {
      transform: translate3d(
          0,
          calc(var(--hb-float-base-y, 0px) - var(--hb-float-range, 24px) * 0.1),
          0
        )
        rotate3d(0, 0, 1, calc(var(--hb-float-tilt, 2deg) * 0.45));
    }
    100% {
      transform: translate3d(
          0,
          calc(var(--hb-float-base-y, 0px) - var(--hb-float-range, 24px) / 2),
          0
        )
        rotate3d(0, 0, 1, calc(var(--hb-float-tilt, 2deg) * -1));
    }
  }

  @keyframes hb-console-roll {
    0% {
      transform: translateY(-5%);
    }
    50% {
      transform: translateY(5%);
    }
    100% {
      transform: translateY(-5%);
    }
  }

  @keyframes hb-console-glint {
    0%,
    100% {
      opacity: 0.22;
      transform: translate3d(-10%, -5%, 0) scale(0.95);
    }
    45% {
      opacity: 0.45;
      transform: translate3d(5%, 3%, 0) scale(1.05);
    }
    70% {
      opacity: 0.3;
      transform: translate3d(-4%, 8%, 0) scale(1.02);
    }
  }

  @keyframes mschf-scan-sweep {
    0% {
      transform: translate3d(0, -120%, 0) scaleY(0.9);
      opacity: 0;
    }
    18% {
      opacity: 0.4;
    }
    48% {
      transform: translate3d(0, 85%, 0) scaleY(1.02);
      opacity: 0.55;
    }
    82% {
      opacity: 0.22;
    }
    100% {
      transform: translate3d(0, 120%, 0) scaleY(0.95);
      opacity: 0;
    }
  }
  .animate-fade-in {
    animation: fade-in 0.3s ease-in-out both;
  }

  .z-nav {
    z-index: 40;
  }
  .z-modal {
    z-index: 50;
  }

  .stack {
    @apply flex flex-col gap-4;
  }
  .center {
    @apply mx-auto max-w-screen-lg;
  }
  .hb-fluid-h1 {
    @apply text-4xl sm:text-5xl md:text-7xl lg:text-8xl;
  }
  .hb-fluid-h2 {
    @apply text-3xl sm:text-4xl md:text-6xl lg:text-7xl;
  }
  .hb-fluid-kicker {
    @apply text-lg sm:text-xl md:text-2xl;
  }
  .hb-bleed-reset {
    @apply mr-0 max-w-full;
  }

  /* Hyperbrut visuals */
  .hb-neon {
    --hb-g1: var(--spec-a, #00e0ff);
    --hb-g2: var(--spec-c, #ff1cf7);
    background-image: linear-gradient(
      120deg,
      color-mix(in oklab, var(--hb-g1), transparent 10%),
      color-mix(in oklab, var(--hb-g2), transparent 10%)
    );
  }

  .hb-intensity-lite {
    --hb-shadow-a: 0.28;
    --hb-rail-a: 0.45;
  }
  .hb-intensity-bold {
    --hb-shadow-a: 0.52;
    --hb-rail-a: 0.8;
  }

  .hb-accent {
    position: relative;
  }
  .hb-accent::before {
    content: '';
    position: absolute;
    inset: 0 auto 0 -1px;
    width: var(--spec-rail-w, 3px);
    background: var(--spectrum);
    opacity: var(--spec-alpha, 0.35);
    pointer-events: none;
  }

  .hb-inlay {
    background: color-mix(in oklab, hsl(var(--b1)) 80%, hsl(var(--b2)) 20%);
    border-radius: 0.8rem;
    box-shadow:
      0 0 0 2px color-mix(in oklab, hsl(var(--b3)) 70%, transparent),
      0 10px 24px rgba(0, 0, 0, 0.2);
    backdrop-filter: saturate(120%) blur(6px);
  }

  .hb-ink {
    color: hsl(var(--bc));
  }
  .hb-ink-soft {
    color: color-mix(in oklab, hsl(var(--bc)) 80%, transparent);
  }

  .hb-shadow-brut {
    box-shadow:
      6px 6px 0 rgba(0, 0, 0, calc(var(--hb-shadow-a, 0.32))),
      0 0 0 2px rgba(0, 0, 0, 0.85);
  }
  .hb-shadow-brut:hover {
    box-shadow:
      8px 8px 0 rgba(0, 0, 0, calc(var(--hb-shadow-a, 0.32))),
      0 0 0 2px rgba(0, 0, 0, 0.9);
    transform: translate(-1px, -1px);
  }

  .hb-brut-card {
    border-radius: 0.75rem;
    border: 2px solid hsl(var(--b3));
    background: linear-gradient(135deg, hsl(var(--b2)) 0%, hsl(var(--b1)) 100%);
    box-shadow:
      0 1px 0 rgba(255, 255, 255, 0.04) inset,
      0 14px 28px rgba(0, 0, 0, 0.2);
    transition:
      transform 0.18s ease,
      box-shadow 0.18s ease,
      filter 0.18s ease;
  }
  .hb-brut-card:hover {
    transform: translateY(-2px);
    box-shadow:
      0 1px 0 rgba(255, 255, 255, 0.04) inset,
      0 18px 34px rgba(0, 0, 0, 0.24);
  }

  .hb-plasma {
    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.35);
    box-shadow:
      0 0 0 2px rgba(0, 0, 0, 0.8),
      0 10px 22px color-mix(in oklab, hsl(var(--p)) 35%, transparent);
  }
  .hb-plasma:hover {
    box-shadow:
      0 0 0 2px rgba(0, 0, 0, 0.85),
      0 14px 28px color-mix(in oklab, hsl(var(--p)) 45%, transparent);
  }

  .hb-grid {
    background-image: radial-gradient(
        circle at 2px 2px,
        rgba(0, 255, 65, 0.18) 1.2px,
        transparent 0
      ),
      linear-gradient(to right, rgba(255, 255, 255, 0.05) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(255, 255, 255, 0.05) 1px, transparent 1px);
    background-size:
      40px 40px,
      20px 20px,
      20px 20px;
  }

  .hb-underline {
    position: relative;
    display: inline-block;
    padding-bottom: 0.35rem;
  }
  .hb-underline::after {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    height: var(--spec-underline-w, 2px);
    width: clamp(5rem, 10vw, 10rem);
    background: var(--spectrum-x);
    opacity: 0.9;
  }

  .hb-field {
    box-shadow: 3px 3px 0 rgba(0, 0, 0, 0.55);
    border-width: 2px !important;
  }
  .hb-field:focus {
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.6);
  }

  .hb-accent-top {
    position: relative;
  }
  .hb-accent-top::before {
    content: '';
    position: absolute;
    inset: -1px 0 auto 0;
    height: var(--spec-rail-w, 3px);
    background: var(--spectrum-x);
    opacity: var(--spec-alpha, 0.35);
    pointer-events: none;
  }

  .hb-stat-card {
    position: relative;
    overflow: hidden;
  }
  .hb-num-outline {
    text-shadow:
      1px 1px 0 rgba(0, 0, 0, 0.65),
      -1px -1px 0 rgba(0, 0, 0, 0.35),
      1px -1px 0 rgba(0, 0, 0, 0.45),
      -1px 1px 0 rgba(0, 0, 0, 0.45);
    letter-spacing: -0.02em;
  }
  .hb-scanbar {
    height: 4px;
    background: var(--spectrum-x);
    border-radius: 2px;
    opacity: 0.9;
  }

  .hb-anim {
    transition:
      transform 0.18s ease,
      box-shadow 0.18s ease;
  }
  .hb-overflow-visible {
    overflow: visible !important;
  }

  .hb-logo {
    width: 2.5rem;
    height: 2.5rem;
    padding: 2px;
    border-radius: 9999px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: conic-gradient(
      from 120deg,
      var(--spec-a),
      var(--spec-c),
      var(--spec-d)
    );
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.7);
  }
  .hb-logo-core {
    width: 100%;
    height: 100%;
    border-radius: 9999px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: hsl(var(--p));
    color: #000;
    font-weight: 800;
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, monospace;
  }

  .hb-blobs {
    position: relative;
  }
  .hb-blobs::before,
  .hb-blobs::after {
    content: '';
    position: fixed;
    inset: auto auto 10% -10%;
    width: 40vmax;
    height: 40vmax;
    border-radius: 50%;
    filter: blur(60px);
    opacity: 0.12;
    pointer-events: none;
    z-index: 0;
  }
  .hb-blobs::before {
    inset: 5% -10% auto auto;
    background: radial-gradient(
      circle at 30% 30%,
      color-mix(in oklab, hsl(var(--p)) 60%, transparent),
      transparent 60%
    );
  }
  .hb-blobs::after {
    inset: auto auto -10% 50%;
    background: radial-gradient(
      circle at 60% 40%,
      color-mix(in oklab, hsl(var(--a)) 60%, transparent),
      transparent 60%
    );
  }
  .hb-vignette::after {
    content: '';
    position: fixed;
    inset: 0;
    box-shadow: inset 0 0 120px rgba(0, 0, 0, 0.35);
    pointer-events: none;
    z-index: 0;
  }
  .hb-noise::after {
    content: '';
    position: fixed;
    inset: 0;
    background-image: repeating-linear-gradient(
        0deg,
        rgba(255, 255, 255, 0.02) 0 1px,
        transparent 1px 2px
      ),
      repeating-linear-gradient(
        90deg,
        rgba(255, 255, 255, 0.02) 0 1px,
        transparent 1px 2px
      );
    mix-blend-mode: overlay;
    pointer-events: none;
    z-index: 0;
  }
}

@media (prefers-reduced-motion: reduce) {
  .hb-float {
    animation: none !important;
  }
  .hb-console::after {
    animation: none;
  }
  .mschf-scanline {
    animation: none !important;
  }
}

/* -------------------- */
/* Overlay (MSCHF) — DOM fallback styles
   Keep subtle; GPU path handles heavy visuals.
   All overlay nodes are pointer-events:none and aria-hidden in JS. */
@layer components {
  #mschf-overlay-root {
    pointer-events: none;
    user-select: none;
  }
  #mschf-overlay-root * {
    pointer-events: none !important;
    user-select: none !important;
  }

  .mschf-layer {
    position: absolute;
    inset: 0;
  }
  .mschf-highlight {
    outline: 2px dashed hsl(var(--p));
    outline-offset: 2px;
  }

  /* Faint dot/line grid */
  .mschf-grid {
    position: absolute;
    inset: 0;
    opacity: 0.04;
    mix-blend-mode: screen;
  }
  .mschf-grid[data-variant='dots'] {
    background-image: radial-gradient(
        circle at 1px 1px,
        rgba(255, 255, 255, 0.35) 1px,
        transparent 1.8px
      ),
      radial-gradient(
        circle at 1px 1px,
        rgba(0, 0, 0, 0.25) 1px,
        transparent 1.8px
      );
    background-size:
      18px 18px,
      36px 36px;
    background-position:
      0 0,
      0 0;
  }
  .mschf-grid[data-variant='lines'] {
    background-image: linear-gradient(
        to right,
        rgba(255, 255, 255, 0.18) 1px,
        transparent 1px
      ),
      linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
    background-size:
      24px 24px,
      24px 24px;
  }

  /* Rings */
  .mschf-rings {
    position: absolute;
    border-radius: 9999px;
    box-shadow:
      0 0 0 1px rgba(255, 255, 255, 0.25) inset,
      0 0 24px rgba(255, 255, 255, 0.12);
    opacity: 0.18;
  }
  .mschf-rings.static {
    opacity: 0.12;
  }

  /* Topographic wiggles */
  .mschf-topo {
    position: absolute;
    inset: auto;
    width: 60vmax;
    height: 30vmax;
    opacity: 0.05;
    mix-blend-mode: screen;
    background: repeating-linear-gradient(
      var(--rot, 8deg),
      rgba(255, 255, 255, 0.25),
      rgba(255, 255, 255, 0.25) 1px,
      transparent 1px,
      transparent 12px
    );
    filter: blur(0.3px);
  }

  /* Corner ticks */
  .mschf-corner {
    position: absolute;
    width: 18px;
    height: 18px;
    opacity: 0.5;
  }
  .mschf-corner-tl {
    left: 8px;
    top: 8px;
    border-left: 2px solid rgba(255, 255, 255, 0.45);
    border-top: 2px solid rgba(255, 255, 255, 0.45);
  }
  .mschf-corner-tr {
    right: 8px;
    top: 8px;
    border-right: 2px solid rgba(255, 255, 255, 0.45);
    border-top: 2px solid rgba(255, 255, 255, 0.45);
  }
  .mschf-corner-bl {
    left: 8px;
    bottom: 8px;
    border-left: 2px solid rgba(255, 255, 255, 0.45);
    border-bottom: 2px solid rgba(255, 255, 255, 0.45);
  }
  .mschf-corner-br {
    right: 8px;
    bottom: 8px;
    border-right: 2px solid rgba(255, 255, 255, 0.45);
    border-bottom: 2px solid rgba(255, 255, 255, 0.45);
  }

  /* Rulers */
  .mschf-ruler {
    position: absolute;
    opacity: 0.25;
  }
  .mschf-ruler-top {
    inset: 10px 10px auto 10px;
    height: 1px;
    background: linear-gradient(
        90deg,
        rgba(255, 255, 255, 0.25) 50%,
        transparent 0
      )
      0 0/8px 1px repeat-x;
  }
  .mschf-ruler-left {
    inset: 10px auto 10px 10px;
    width: 1px;
    background: linear-gradient(
        180deg,
        rgba(255, 255, 255, 0.25) 50%,
        transparent 0
      )
      0 0/1px 8px repeat-y;
  }

  /* Scanline */
  .mschf-scanline {
    position: absolute;
    inset: -35% -12%;
    height: 45%;
    transform: translate3d(0, -120%, 0);
    background: linear-gradient(
        180deg,
        rgba(255, 255, 255, 0.36) 0%,
        rgba(255, 255, 255, 0.12) 32%,
        transparent 70%
      ),
      repeating-linear-gradient(
        180deg,
        rgba(255, 255, 255, 0.14) 0 2px,
        transparent 2px 5px
      );
    mix-blend-mode: screen;
    filter: saturate(145%) blur(0.4px);
    opacity: 0.38;
    animation: mschf-scan-sweep var(--mschf-scan-speed, 9s)
      cubic-bezier(0.37, 0.01, 0.13, 1) infinite;
    animation-delay: var(--mschf-scan-delay, -2s);
    pointer-events: none;
  }
  .mschf-scanline::after {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(
      90deg,
      transparent 30%,
      rgba(255, 255, 255, 0.55) 50%,
      transparent 70%
    );
    mix-blend-mode: soft-light;
    opacity: 0.45;
    filter: blur(1px);
  }
  .mschf-scanline.static {
    animation: none;
    opacity: 0.18;
    filter: saturate(110%) blur(0.3px);
  }
  .mschf-scanline.static::after {
    opacity: 0.22;
  }

  /* Labels and stamps */
  .mschf-stamp {
    position: absolute;
    padding: 0.25rem 0.5rem;
    font:
      700 10px/1 ui-monospace,
      Menlo,
      monospace;
    letter-spacing: 0.08em;
    text-transform: uppercase;
    color: rgba(255, 255, 255, 0.8);
    background: rgba(0, 0, 0, 0.55);
    border: 1px solid rgba(255, 255, 255, 0.35);
    border-radius: 4px;
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.5);
  }
  .mschf-badge {
    display: inline-block;
    margin: 0.125rem;
    padding: 0.25rem 0.5rem;
    font:
      700 10px/1 ui-monospace,
      Menlo,
      monospace;
    letter-spacing: 0.06em;
    color: #000;
    background: hsl(var(--p));
    border: 1px solid rgba(0, 0, 0, 0.8);
    border-radius: 6px;
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.6);
  }

  /* Framing brackets */
  .mschf-brackets {
    position: absolute;
    inset: auto;
    width: 240px;
    height: 120px;
    opacity: 0.22;
    border-radius: 12px;
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.25) inset;
  }

  /* Perf edges */
  .mschf-perf {
    position: absolute;
    inset: auto;
    opacity: 0.2;
    background: repeating-linear-gradient(
      90deg,
      rgba(255, 255, 255, 0.4) 0 2px,
      transparent 2px 12px
    );
    height: 10px;
    width: 100%;
  }

  /* Dimensions HUD */
  .mschf-dims {
    position: absolute;
    border: 1px dashed rgba(255, 255, 255, 0.35);
    border-radius: 6px;
    padding: 2px;
    opacity: 0.55;
  }
  .mschf-dims-label {
    position: absolute;
    transform: translateY(-100%);
    left: 0;
    top: 0;
    padding: 0.1rem 0.35rem;
    font:
      700 10px/1 ui-monospace,
      Menlo,
      monospace;
    letter-spacing: 0.06em;
    color: #000;
    background: rgba(255, 255, 255, 0.85);
    border: 1px solid rgba(0, 0, 0, 0.75);
    border-radius: 3px;
    box-shadow: 2px 2px 0 rgba(0, 0, 0, 0.4);
  }

  /* Holographic blob */
  .mschf-holo {
    position: absolute;
    width: 220px;
    height: 140px;
    border-radius: 9999px;
    filter: blur(18px) saturate(140%);
    opacity: 0.09;
    background: conic-gradient(
      from 180deg,
      hsl(var(--p) / 0.8),
      hsl(var(--a) / 0.6),
      hsl(var(--s) / 0.4),
      hsl(var(--p) / 0.8)
    );
  }
  .mschf-holo.static {
    filter: blur(16px) saturate(120%);
    opacity: 0.06;
  }
}
