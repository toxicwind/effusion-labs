---
title: LV Image Atlas — Report
permalink: /lv/report/
layout: base.njk
fullBleed: true
metaDisable: true
---
{#
  This template renders a comprehensive, data‑driven report for the LV image atlas
  crawl.  It takes the summarized crawl information provided via the `lvreport`
  data file and presents it with modern daisyUI v5 components.  The layout
  emphasises key metrics using the Stats and Radial Progress components, while
  retaining interactive filtering for each table.  Sections are clearly
  delineated with headings and concise descriptions.  Feel free to adjust
  colours via themes (see base.njk) or customise individual elements further.
#}

{% set lv       = lvreport.lvreport or lvreport or {} %}
{% set baseHref = lv.baseHref or '/content/projects/lv-images/generated/lv/' %}
{% set summary  = lv.summary  or {} %}
{# Pull global totals from the top level (lv.totals) first, falling back to summary.totals if not present.  The crawler exposes unique image and page counts via lv.totals. #}
{% set totals   = lv.totals or summary.totals or {} %}
{% set sitemaps = lv.sitemaps or [] %}
{% set docs     = lv.docs     or [] %}
{% set robots   = lv.robots   or [] %}
{% set sample   = lv.sample   or [] %}
{% set metrics  = lv.metrics  or {} %}
{% set robotsMetrics = metrics.robots or {} %}
{% set docsMetrics   = metrics.docs   or {} %}
{% set toneBadge = {
  'error': 'badge-error',
  'warn' : 'badge-warning',
  'ok'   : 'badge-success',
  'info' : 'badge-info'
} %}
{% set toneChip = {
  'error': 'bg-error/15 text-error',
  'warn' : 'bg-warning/20 text-warning-content',
  'ok'   : 'bg-success/15 text-success',
  'info' : 'bg-info/15 text-info'
} %}

{# Compute flagged percentages for radial progress indicators.  The logical
   short‑circuit ensures we avoid division by zero when there are no items. #}
{% set robotsPct = (robotsMetrics.total and robotsMetrics.total > 0) and ((robotsMetrics.issues * 100) / robotsMetrics.total) or 0 %}
{% set docsPct   = (docsMetrics.total   and docsMetrics.total   > 0) and ((docsMetrics.issues   * 100) / docsMetrics.total)   or 0 %}

<section class="hero rounded-box bg-gradient-to-br from-primary to-secondary p-8 text-primary-content shadow-lg">
  <div class="max-w-xl">
    <h1 class="text-4xl font-bold mb-2">{{ title }}</h1>
    <p class="opacity-80 text-sm">A comprehensive report summarising your LV image crawl — hosts, sitemaps, robots directives, documents and sample images.</p>
    {% if baseHref %}
      <a href="{{ baseHref }}" class="btn btn-primary mt-4" target="_blank" rel="noreferrer">Open generated directory</a>
    {% endif %}
  </div>
</section>

<section class="mt-10 space-y-8">
  {#
    Overview stats block: show key metrics using daisyUI's stats component.
    We separate metrics into two rows: the first row highlights global
    counts (unique images/pages across all runs, hosts and generated
    information) while the second row focuses on the current run’s
    lifecycle counts (added, removed, active, total and duplicates).
  #}
  <div class="stats stats-vertical lg:stats-horizontal shadow gap-6 flex-wrap">
    <div class="stat">
      <div class="stat-title">Generated</div>
      <div class="stat-value">{{ summary.generatedAt or '—' }}</div>
      <div class="stat-desc">Version {{ summary.version or '—' }}</div>
    </div>
    <div class="stat">
      <div class="stat-title">Hosts</div>
      <div class="stat-value">{{ totals.hosts or 0 }}</div>
      <div class="stat-desc">Sitemaps {{ totals.sitemapsProcessed or 0 }}</div>
    </div>
    <div class="stat">
      <div class="stat-title">Unique Images</div>
      <div class="stat-value">{{ totals.images or 0 }}</div>
      <div class="stat-desc">across all runs</div>
    </div>
    <div class="stat">
      <div class="stat-title">Unique Pages</div>
      <div class="stat-value">{{ totals.pages or 0 }}</div>
      <div class="stat-desc">across all runs</div>
    </div>
    <div class="stat">
      <div class="stat-title">Sample Images</div>
      <div class="stat-value">{{ sample | length }}</div>
      <div class="stat-desc">NDJSON snapshots</div>
    </div>
  </div>

  <div class="stats stats-vertical lg:stats-horizontal shadow gap-6 flex-wrap mt-6">
    <div class="stat">
      <div class="stat-title">New Items</div>
      <div class="stat-value">{{ summary.items and summary.items.added or 0 }}</div>
      <div class="stat-desc">in this run</div>
    </div>
    <div class="stat">
      <div class="stat-title">Removed Items</div>
      <div class="stat-value">{{ summary.items and summary.items.removed or 0 }}</div>
      <div class="stat-desc">this run</div>
    </div>
    <div class="stat">
      <div class="stat-title">Active Items</div>
      <div class="stat-value">{{ summary.items and summary.items.active or 0 }}</div>
      <div class="stat-desc">currently tracked</div>
    </div>
    <div class="stat">
      <div class="stat-title">Total Items</div>
      <div class="stat-value">{{ summary.items and summary.items.total or 0 }}</div>
      <div class="stat-desc">across all runs</div>
    </div>
    <div class="stat">
      <div class="stat-title">Duplicates</div>
      <div class="stat-value">{{ summary.items and summary.items.duplicates or 0 }}</div>
      <div class="stat-desc">{{ summary.items and summary.items.purged or 0 }} purged</div>
    </div>
  </div>

  {# Health summary: display flagged hosts/files using radial progress charts. #}
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div class="card shadow bg-base-200">
      <div class="card-body">
        <h2 class="card-title">Robots Health</h2>
        <p class="text-sm opacity-70">{{ robotsMetrics.total or 0 }} hosts analysed</p>
        <div class="flex items-center gap-6 mt-4">
          <div class="radial-progress text-error" style="--value: {{ robotsPct | round(1) }}; --size: 4rem; --thickness: 4px;">
            {{ robotsPct | round(1) }}%
          </div>
          <div>
            <p class="text-2xl font-bold">{{ robotsMetrics.issues or 0 }}</p>
            <p class="text-sm opacity-70">Flagged</p>
          </div>
        </div>
        <div class="mt-4 flex flex-wrap gap-2">
          {% for seg in robotsMetrics.breakdown or [] %}
            {% set c = toneChip[seg.tone] or 'bg-base-300/20 text-base-content' %}
            <span class="badge {{ c }}">{{ seg.label }} • {{ seg.count }} ({{ seg.pct }}%)</span>
          {% endfor %}
        </div>
      </div>
    </div>
    <div class="card shadow bg-base-200">
      <div class="card-body">
        <h2 class="card-title">Documents Health</h2>
        <p class="text-sm opacity-70">{{ docsMetrics.total or 0 }} files analysed</p>
        <div class="flex items-center gap-6 mt-4">
          <div class="radial-progress text-error" style="--value: {{ docsPct | round(1) }}; --size: 4rem; --thickness: 4px;">
            {{ docsPct | round(1) }}%
          </div>
          <div>
            <p class="text-2xl font-bold">{{ docsMetrics.issues or 0 }}</p>
            <p class="text-sm opacity-70">Flagged</p>
          </div>
        </div>
        <div class="mt-4 flex flex-wrap gap-2">
          {% for seg in docsMetrics.breakdown or [] %}
            {% set c = toneChip[seg.tone] or 'bg-base-300/20 text-base-content' %}
            <span class="badge {{ c }}">{{ seg.label }} • {{ seg.count }} ({{ seg.pct }}%)</span>
          {% endfor %}
        </div>
      </div>
    </div>
  </div>

  {# Sitemaps Section #}
  <section id="sitemaps" class="space-y-4 mt-12">
    <h2 class="text-3xl font-semibold">Sitemaps</h2>
    <p class="text-sm opacity-70">Every sitemap crawl attempt with cached artifacts.</p>
    <div class="flex flex-wrap gap-3 items-center mt-4">
      <label class="input input-bordered flex items-center gap-2 w-full sm:w-72">
        <span class="opacity-60">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-3.5-3.5"></path></svg>
        </span>
        <input id="sitemapFilter" type="search" class="grow" placeholder="Filter host or URL…" autocomplete="off" />
      </label>
      <div id="typeChips" class="join"></div>
      <button class="btn btn-sm btn-outline" id="exportSitemaps" type="button">Export CSV</button>
    </div>
    {% if sitemaps | length %}
    <div class="overflow-x-auto rounded-box border border-base-content/10 mt-4">
      <table class="table table-zebra table-sm" id="sitemapsTable">
        <thead>
          <tr>
            <th>Host</th>
            <th>Type</th>
            <th>Images</th>
            <th>Status</th>
            <th>Live</th>
            <th>Cached</th>
          </tr>
        </thead>
        <tbody>
          {% for r in sitemaps %}
            <tr data-type="{{ r.type }}">
              <td class="font-medium">{{ r.host or '—' }}</td>
              <td><span class="badge badge-outline capitalize">{{ r.type or 'other' }}</span></td>
              <td>{{ r.imageCount or 0 }}</td>
              <td>{{ r.status or '—' }}</td>
              <td>
                {% if r.url %}<a href="{{ r.url }}" class="link link-primary" target="_blank" rel="noreferrer">{{ r.url }}</a>{% else %}—{% endif %}
              </td>
              <td>
                {% if r.savedPath %}<a href="{{ baseHref }}{{ r.savedPath }}" class="link" target="_blank" rel="noreferrer">open</a>{% else %}—{% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    {% else %}
      <div class="alert alert-info mt-4">
        <span>No sitemap activity yet. Run the crawler to populate this section.</span>
      </div>
    {% endif %}
  </section>

  {# Runs history timeline #}
  <section id="history" class="space-y-4 mt-12">
    <h2 class="text-3xl font-semibold">Runs History</h2>
    <p class="text-sm opacity-70">Overview of the last {{ lv.runsHistory and lv.runsHistory | length or 0 }} runs with lifecycle metrics.</p>
    {% if lv.runsHistory and (lv.runsHistory | length) %}
      <div class="overflow-x-auto rounded-box border border-base-content/10 mt-4">
        <table class="table table-zebra table-xs" id="historyTable">
          <thead>
            <tr>
              <th>Date</th>
              <th>Added</th>
              <th>Removed</th>
              <th>Active</th>
              <th>Total</th>
              <th>Duplicates</th>
              <th>Purged</th>
              <th>Images</th>
              <th>Pages</th>
            </tr>
          </thead>
          <tbody>
            {% for run in lv.runsHistory | reverse %}
              <tr>
                <td>{{ run.timestamp }}</td>
                <td>{{ run.metrics.added or 0 }}</td>
                <td>{{ run.metrics.removed or 0 }}</td>
                <td>{{ run.metrics.active or 0 }}</td>
                <td>{{ run.metrics.total or 0 }}</td>
                <td>{{ run.metrics.duplicates or 0 }}</td>
                <td>{{ run.metrics.purged or 0 }}</td>
                <td>{{ run.totals.images or 0 }}</td>
                <td>{{ run.totals.pages or 0 }}</td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    {% else %}
      <div class="alert alert-info mt-4"><span>No run history available.</span></div>
    {% endif %}
  </section>

  {# Duplicate images section #}
  <section id="duplicates-section" class="space-y-4 mt-12">
    <h2 class="text-3xl font-semibold">Duplicate Images</h2>
    <p class="text-sm opacity-70">Canonical images with one or more duplicates. The count reflects duplicate occurrences beyond the canonical image.</p>
    <div class="flex flex-wrap gap-3 items-end mt-4">
      <label class="input input-bordered flex items-center gap-2 w-full sm:w-72">
        <span class="opacity-60">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-3.5-3.5"></path></svg>
        </span>
        <input id="duplicatesFilter" type="search" class="grow" placeholder="Search basename, title or page…" autocomplete="off" />
      </label>
      <button class="btn btn-sm btn-outline" id="exportDuplicates" type="button">Export CSV</button>
    </div>
    {% if lv.duplicates and (lv.duplicates | length) %}
      <div class="overflow-x-auto rounded-box border border-base-content/10 mt-4">
        <table class="table table-zebra table-xs" id="duplicatesTable">
          <thead>
            <tr>
              <th class="min-w-[80px]">Image</th>
              <th class="min-w-[80px]">Dupes</th>
              <th>Basename</th>
              <th class="min-w-[260px]">Page</th>
              <th>First Seen</th>
              <th>Last Seen</th>
            </tr>
          </thead>
          <tbody>
            {% for d in lv.duplicates %}
              <tr>
                <td><a href="{{ d.src }}" target="_blank" rel="noreferrer"><img src="{{ d.src }}" alt="" class="w-12 h-12 object-cover rounded-box border border-base-content/10" /></a></td>
                <td>{{ d.count - 1 }}</td>
                <td>{{ d.basename or '' }}</td>
                <td>{% if d.pageUrl %}<a class="link link-primary" href="{{ d.pageUrl }}" target="_blank" rel="noreferrer">{{ d.pageUrl }}</a>{% else %}—{% endif %}</td>
                <td>{{ d.firstSeen }}</td>
                <td>{{ d.lastSeen }}</td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    {% else %}
      <div class="alert alert-info mt-4"><span>No duplicates found.</span></div>
    {% endif %}
  </section>

  {# Top products section #}
  <section id="products-section" class="space-y-4 mt-12">
    <h2 class="text-3xl font-semibold">Top Products</h2>
    <p class="text-sm opacity-70">Pages with the most images (showing top {{ lv.topProducts and lv.topProducts | length or 0 }} results).</p>
    <div class="flex flex-wrap gap-3 items-end mt-4">
      <label class="input input-bordered flex items-center gap-2 w-full sm:w-72">
        <span class="opacity-60">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-3.5-3.5"></path></svg>
        </span>
        <input id="productsFilter" type="search" class="grow" placeholder="Search page or title…" autocomplete="off" />
      </label>
      <button class="btn btn-sm btn-outline" id="exportProducts" type="button">Export CSV</button>
    </div>
    {% if lv.topProducts and (lv.topProducts | length) %}
      <div class="overflow-x-auto rounded-box border border-base-content/10 mt-4">
        <table class="table table-zebra table-xs" id="productsTable">
          <thead>
            <tr>
              <th class="min-w-[240px]">Page</th>
              <th>Total Images</th>
              <th>Unique Images</th>
              <th>First Seen</th>
              <th>Last Seen</th>
            </tr>
          </thead>
          <tbody>
            {% for p in lv.topProducts %}
              <tr>
                <td>{% if p.pageUrl %}<a href="{{ p.pageUrl }}" class="link link-primary" target="_blank" rel="noreferrer">{{ p.title }}</a>{% else %}{{ p.title }}{% endif %}</td>
                <td>{{ p.totalImages }}</td>
                <td>{{ p.uniqueImages }}</td>
                <td>{{ p.firstSeen }}</td>
                <td>{{ p.lastSeen }}</td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    {% else %}
      <div class="alert alert-info mt-4"><span>No products found.</span></div>
    {% endif %}
  </section>

  {# Hosts overview section #}
  <section id="hosts-section" class="space-y-4 mt-12">
    <h2 class="text-3xl font-semibold">Hosts Overview</h2>
    <p class="text-sm opacity-70">Summary of total and unique images, duplicates and pages per host.</p>
    <div class="flex flex-wrap gap-3 items-end mt-4">
      <label class="input input-bordered flex items-center gap-2 w-full sm:w-72">
        <span class="opacity-60">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-3.5-3.5"></path></svg>
        </span>
        <input id="hostsFilter" type="search" class="grow" placeholder="Search host…" autocomplete="off" />
      </label>
      <button class="btn btn-sm btn-outline" id="exportHosts" type="button">Export CSV</button>
    </div>
    {% if lv.hostStats and (lv.hostStats | length) %}
      <div class="overflow-x-auto rounded-box border border-base-content/10 mt-4">
        <table class="table table-zebra table-xs" id="hostsTable">
          <thead>
            <tr>
              <th class="min-w-[200px]">Host</th>
              <th>Total Images</th>
              <th>Unique Images</th>
              <th>Duplicates</th>
              <th>Pages</th>
            </tr>
          </thead>
          <tbody>
            {% for h in lv.hostStats %}
              <tr>
                <td>{{ h.host or '—' }}</td>
                <td>{{ h.images }}</td>
                <td>{{ h.uniqueImages }}</td>
                <td>{{ h.duplicates }}</td>
                <td>{{ h.pages }}</td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
    {% else %}
      <div class="alert alert-info mt-4"><span>No host data available.</span></div>
    {% endif %}
  </section>

  {# Robots Section #}
  <section id="robots" class="space-y-4 mt-12">
    <h2 class="text-3xl font-semibold">Robots Explorer</h2>
    <p class="text-sm opacity-70">Classified view of cached <code>robots.txt</code> responses with live mirrors, cached filenames, and directive counts.</p>
    <div class="flex flex-col gap-3 sm:flex-row sm:items-end sm:flex-wrap mt-4">
      <label class="input input-bordered flex items-center gap-2 w-full sm:w-72">
        <span class="opacity-60">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-3.5-3.5"></path></svg>
        </span>
        <input id="robotsFilter" type="search" class="grow" placeholder="Search host, directive, or status…" autocomplete="off" />
      </label>
      <div id="robotsStatusFilters" class="flex flex-wrap gap-2">
        {% for seg in robotsMetrics.breakdown or [] %}
          {% set badgeClass = toneBadge[seg.tone] or 'badge-outline' %}
          <button type="button" class="btn btn-xs btn-ghost status-chip" data-status="{{ seg.key }}">
            <span class="badge {{ badgeClass }} badge-xs">{{ seg.label }}</span>
            <span class="text-xs opacity-60">{{ seg.count }}</span>
          </button>
        {% endfor %}
      </div>
      <label class="flex items-center gap-2 text-sm mt-2 sm:mt-0">
        <input id="robotsIssuesOnly" type="checkbox" class="checkbox checkbox-sm" />
        <span>Show issues only</span>
      </label>
    </div>
    {% if robots | length %}
    <div class="overflow-x-auto rounded-box border border-base-content/10 mt-4">
      <table class="table table-zebra table-xs" id="robotsTable">
        <thead>
          <tr>
            <th class="min-w-[220px]">Host</th>
            <th class="min-w-[160px]">Status</th>
            <th class="min-w-[160px]">Cache</th>
            <th class="min-w-[200px]">Directives</th>
            <th class="min-w-[260px]">Preview</th>
          </tr>
        </thead>
        <tbody>
          {% for r in robots %}
            <tr data-host="{{ r.host }}" data-status="{{ r.statusCategory }}" data-issue="{% if r.isIssue %}1{% else %}0{% endif %}">
              <td class="align-top">
                <div class="flex flex-col gap-1">
                  <span class="font-medium">{{ r.host }}</span>
                  <div class="flex flex-wrap items-center gap-2 text-xs">
                    <a class="link link-primary" href="https://{{ r.host }}/robots.txt" target="_blank" rel="noreferrer">Live robots.txt</a>
                    {% if r.robotsTxtPath %}
                      <span class="opacity-40">·</span>
                      <a class="link" href="{{ baseHref }}{{ r.robotsTxtPath }}" target="_blank" rel="noreferrer">Cached</a>
                    {% endif %}
                    {% if r.blacklisted %}
                      <span class="badge badge-error badge-outline">Blacklisted{% if r.blacklistReason %} · {{ r.blacklistReason }}{% endif %}</span>
                    {% endif %}
                  </div>
                  {% if r.blacklisted and r.blacklistUntil %}
                    <span class="text-[11px] opacity-60">Active until {{ r.blacklistUntil }}</span>
                  {% endif %}
                </div>
              </td>
              <td class="align-top">
                <div class="flex flex-col gap-1">
                  {% set badgeClass = toneBadge[r.statusTone] or 'badge-outline' %}
                  <span class="badge {{ badgeClass }} badge-sm">{{ r.statusLabel }}</span>
                  {% if r.httpLabel %}<span class="badge badge-outline badge-xs">{{ r.httpLabel }}</span>{% endif %}
                  <span class="text-[11px] opacity-60">{{ r.linesTotal }} lines</span>
                </div>
              </td>
              <td class="align-top">
                {% if r.robotsTxtPath %}
                  <div class="flex flex-col gap-1 text-xs">
                    <a class="link link-hover" href="{{ baseHref }}{{ r.robotsTxtPath }}" target="_blank" rel="noreferrer">{{ r.fileName }}</a>
                    <span class="opacity-60">{{ r.sizeLabel }} · cached</span>
                  </div>
                {% else %}
                  <span class="text-xs opacity-60">No cache</span>
                {% endif %}
              </td>
              <td class="align-top">
                {% set allowCount   = r.parsed.merged.allow.length %}
                {% set disallowCount= r.parsed.merged.disallow.length %}
                {% set noindexCount = r.parsed.merged.noindex.length %}
                {% set sitemapCount= r.parsed.merged.sitemaps.length %}
                <div class="flex flex-wrap gap-1 text-[11px]">
                  {% if allowCount %}<span class="badge badge-outline badge-xs">Allow {{ allowCount }}</span>{% endif %}
                  {% if disallowCount %}<span class="badge badge-outline badge-xs">Disallow {{ disallowCount }}</span>{% endif %}
                  {% if noindexCount %}<span class="badge badge-outline badge-xs">Noindex {{ noindexCount }}</span>{% endif %}
                  {% if r.parsed.merged.crawlDelay is not none %}<span class="badge badge-outline badge-xs">Delay {{ r.parsed.merged.crawlDelay }}</span>{% endif %}
                  {% if sitemapCount %}<span class="badge badge-outline badge-xs">Sitemaps {{ sitemapCount }}</span>{% endif %}
                </div>
                {% if sitemapCount %}
                  <div class="mt-1 space-y-1 text-[11px]">
                    {% for u in r.parsed.merged.sitemaps | slice(0, 3) %}
                      <a class="link link-hover" href="{{ u }}" target="_blank" rel="noreferrer">{{ u }}</a>
                    {% endfor %}
                    {% if r.parsed.merged.sitemaps.length > 3 %}<span class="opacity-60">+{{ r.parsed.merged.sitemaps.length - 3 }} more…</span>{% endif %}
                  </div>
                {% endif %}
                {% if r.parsed.other and (r.parsed.other | length) %}
                  <div class="mt-1 flex flex-wrap gap-1 text-[11px]">
                    {% for key, vals in r.parsed.other %}
                      <span class="badge badge-outline badge-xs">{{ key }}: {{ vals | join(' · ') }}</span>
                    {% endfor %}
                  </div>
                {% endif %}
              </td>
              <td class="align-top w-80">
                {% if r.preview %}
                  <pre class="bg-base-100 border border-base-content/10 rounded-box p-3 text-xs leading-5 whitespace-pre-wrap max-h-36 overflow-auto">{{ r.preview | escape }}</pre>
                  {% if r.robotsTxtPath %}<a class="link link-hover text-xs" href="{{ baseHref }}{{ r.robotsTxtPath }}" target="_blank" rel="noreferrer">Open full raw</a>{% endif %}
                {% elif r.hasCached %}
                  <a class="link link-hover text-xs" href="{{ baseHref }}{{ r.robotsTxtPath }}" target="_blank" rel="noreferrer">Open cached file</a>
                {% else %}
                  <span class="text-xs opacity-60">No cache captured</span>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    {% else %}
      <div class="alert alert-info mt-4">
        <span>No robots have been cached yet.</span>
      </div>
    {% endif %}
  </section>

  {# Docs Section #}
  <section id="docs" class="space-y-4 mt-12">
    <h2 class="text-3xl font-semibold">Cached Documents</h2>
    <p class="text-sm opacity-70">Inventory of saved sitemap payloads and text resources.</p>
    <p class="text-xs opacity-60">Use the status filters to surface errors, HTML payloads and gzip archives.</p>
    <div class="flex flex-col gap-3 sm:flex-row sm:flex-wrap sm:items-end mt-4">
      <label class="input input-bordered flex items-center gap-2 w-full sm:w-72">
        <span class="opacity-60">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-3.5-3.5"></path></svg>
        </span>
        <input id="docsFilter" type="search" class="grow" placeholder="Search host, filename, or status…" autocomplete="off" />
      </label>
      <div id="docsStatusFilters" class="flex flex-wrap gap-2">
        {% for seg in docsMetrics.breakdown or [] %}
          {% set badgeClass = toneBadge[seg.tone] or 'badge-outline' %}
          <button type="button" class="btn btn-xs btn-ghost status-chip" data-status="{{ seg.key }}">
            <span class="badge {{ badgeClass }} badge-xs">{{ seg.label }}</span>
            <span class="text-xs opacity-60">{{ seg.count }}</span>
          </button>
        {% endfor %}
      </div>
      <label class="flex items-center gap-2 text-sm mt-2 sm:mt-0">
        <input id="docsIssuesOnly" type="checkbox" class="checkbox checkbox-sm" />
        <span>Show issues only</span>
      </label>
      <button class="btn btn-sm btn-outline" id="exportDocs" type="button">Export CSV</button>
    </div>
    {% if docs | length %}
    <div class="overflow-x-auto rounded-box border border-base-content/10 mt-4">
      <table class="table table-zebra table-xs" id="docsTable">
        <thead>
          <tr>
            <th class="min-w-[200px]">Host</th>
            <th class="min-w-[220px]">File</th>
            <th class="min-w-[160px]">Status</th>
            <th class="min-w-[160px]">Meta</th>
            <th class="min-w-[320px]">Preview</th>
          </tr>
        </thead>
        <tbody>
          {% for d in docs %}
            <tr data-status="{{ d.statusCategory }}" data-issue="{% if d.isIssue %}1{% else %}0{% endif %}">
              <td class="align-top">
                <div class="flex flex-col gap-1">
                  <span class="font-medium">{{ d.host or '—' }}</span>
                  {% if d.url %}<a class="link link-primary text-xs" href="{{ d.url }}" target="_blank" rel="noreferrer">Live document</a>{% endif %}
                </div>
              </td>
              <td class="align-top">
                <div class="flex flex-col gap-1 text-xs">
                  {% if d.savedPath %}
                    <a class="link link-hover" href="{{ baseHref }}{{ d.savedPath }}" target="_blank" rel="noreferrer">{{ d.fileName }}</a>
                    <span class="opacity-60">{{ d.savedPath }}</span>
                  {% endif %}
                  <span class="badge badge-outline badge-xs capitalize">{{ d.kind or '—' }}</span>
                </div>
              </td>
              <td class="align-top">
                {% set badgeClass = toneBadge[d.statusTone] or 'badge-outline' %}
                <div class="flex flex-col gap-1">
                  <span class="badge {{ badgeClass }} badge-sm">{{ d.statusLabel }}</span>
                  {% if d.httpLabel %}<span class="badge badge-outline badge-xs">{{ d.httpLabel }}</span>{% endif %}
                  {% if d.status %}<span class="text-[11px] opacity-60">Fetch status {{ d.status }}</span>{% endif %}
                </div>
              </td>
              <td class="align-top text-xs">
                <div class="space-y-1">
                  <span class="opacity-70">{{ d.sizeLabel }}</span>
                  {% if d.contentType %}<span class="opacity-60">{{ d.contentType }}</span>{% endif %}
                  {% if d.statusCategory == 'gzip' %}<span class="opacity-60">Compressed (.gz)</span>{% endif %}
                </div>
              </td>
              <td class="align-top w-[360px]">
                {% if d.preview %}
                  <pre class="bg-base-100 border border-base-content/10 rounded-box p-3 text-xs leading-5 whitespace-pre-wrap max-h-40 overflow-auto">{{ d.preview | escape }}</pre>
                {% elif d.statusCategory == 'gzip' %}
                  <span class="text-xs opacity-60">Gzip archive — download to inspect.</span>
                {% else %}
                  <span class="text-xs opacity-60">No preview available.</span>
                {% endif %}
              </td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>
    {% else %}
      <div class="alert alert-info mt-4">
        <span>No cached documents on disk.</span>
      </div>
    {% endif %}
  </section>

  {# Sample images grid #}
  <section id="sample" class="space-y-4 mt-12">
    <h2 class="text-3xl font-semibold">Image Sample</h2>
    <p class="text-sm opacity-70">A quick glance at NDJSON shards. Click any tile to open the source.</p>
    {% if sample | length %}
      <div class="grid gap-4 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 mt-4">
        {% for i in sample %}
          <a class="relative block aspect-square overflow-hidden rounded-box border border-base-content/10 hover:shadow-md transition" href="{{ i.src }}" target="_blank" title="{{ i.title or i.src }}" rel="noreferrer">
            <img loading="lazy" src="{{ i.src }}" alt="" class="h-full w-full object-cover" />
          </a>
        {% endfor %}
      </div>
      <p class="text-sm opacity-70 mt-2">Showing {{ sample | length }} sample images.</p>
    {% else %}
      <div class="alert alert-info mt-4">
        <span>No image samples were found in <code>items/*.ndjson</code>.</span>
      </div>
    {% endif %}
  </section>

</section>

{#
  The interactive filtering and export code remains largely untouched from the
  previous implementation, ensuring table search, status filtering and CSV
  export continues to work seamlessly.  Feel free to extend or refactor the
  JavaScript below to add new interactions, such as tabbed sections or
  advanced analytics.  For now, we simply initialise the chips and attach
  filters as before.
#}
<script>
(function(){
  const TYPES = ["image","product","content","catalog","index","other"];
  const chipsRoot = document.getElementById('typeChips');
  const sitemapFilter = document.getElementById('sitemapFilter');
  const sitemapsTable = document.getElementById('sitemapsTable');
  const exportSitemaps = document.getElementById('exportSitemaps');

  if (chipsRoot && sitemapsTable) {
    const active = new Set(TYPES);
    TYPES.forEach(type => {
      const button = document.createElement('button');
      button.type = 'button';
      button.textContent = type;
      button.className = 'btn btn-xs btn-outline';
      syncChipState(button, true);
      button.addEventListener('click', () => {
        if (active.has(type)) {
          active.delete(type);
          syncChipState(button, false);
        } else {
          active.add(type);
          syncChipState(button, true);
        }
        filterSitemaps();
      });
      chipsRoot.appendChild(button);
    });
    function filterSitemaps() {
      const query = (sitemapFilter && sitemapFilter.value || '').toLowerCase();
      sitemapsTable.querySelectorAll('tbody tr').forEach(tr => {
        const type = tr.getAttribute('data-type');
        const text = tr.innerText.toLowerCase();
        const okType = !type || active.has(type);
        const okText = !query || text.includes(query);
        tr.style.display = okType && okText ? '' : 'none';
      });
    }
    if (sitemapFilter) sitemapFilter.addEventListener('input', filterSitemaps);
    filterSitemaps();
    if (exportSitemaps) {
      exportSitemaps.addEventListener('click', () => {
        const rows = [["Host","Type","Images","Status","URL","Cached"]];
        sitemapsTable.querySelectorAll('tbody tr').forEach(tr => {
          if (tr.style.display === 'none') return;
          const cells = Array.from(tr.querySelectorAll('td')).map(td => td.innerText.trim());
          rows.push(cells);
        });
        downloadCsv('sitemaps.csv', rows);
      });
    }
  }
  const robotsTable = document.getElementById('robotsTable');
  const robotsFilter = document.getElementById('robotsFilter');
  const robotsStatusButtons = Array.from(document.querySelectorAll('#robotsStatusFilters .status-chip'));
  const robotsIssuesOnly = document.getElementById('robotsIssuesOnly');
  setupTableFilter({ table: robotsTable, searchInput: robotsFilter, statusButtons: robotsStatusButtons, issuesToggle: robotsIssuesOnly });
  const docsTable = document.getElementById('docsTable');
  const docsFilter = document.getElementById('docsFilter');
  const docsStatusButtons = Array.from(document.querySelectorAll('#docsStatusFilters .status-chip'));
  const docsIssuesOnly = document.getElementById('docsIssuesOnly');
  setupTableFilter({ table: docsTable, searchInput: docsFilter, statusButtons: docsStatusButtons, issuesToggle: docsIssuesOnly });
  const exportDocs = document.getElementById('exportDocs');
  if (exportDocs && docsTable) {
    exportDocs.addEventListener('click', () => {
      const rows = [["Host","File","Status","Meta","Preview"]];
      docsTable.querySelectorAll('tbody tr').forEach(tr => {
        if (tr.style.display === 'none') return;
        const cells = Array.from(tr.querySelectorAll('td')).map(td => td.innerText.trim());
        rows.push(cells);
      });
      downloadCsv('lv-docs.csv', rows);
    });
  }

  // Hosts table: simple text search and CSV export.  We reuse setupTableFilter
  // without status or issues filters.  The host overview exposes
  // hostStats via lv.hostStats.
  const hostsTable = document.getElementById('hostsTable');
  const hostsFilter = document.getElementById('hostsFilter');
  if (hostsTable) {
    setupTableFilter({ table: hostsTable, searchInput: hostsFilter, statusButtons: null, issuesToggle: null });
  }
  const exportHosts = document.getElementById('exportHosts');
  if (exportHosts && hostsTable) {
    exportHosts.addEventListener('click', () => {
      const rows = [["Host","Images","Unique","Duplicates","Pages"]];
      hostsTable.querySelectorAll('tbody tr').forEach(tr => {
        if (tr.style.display === 'none') return;
        const cells = Array.from(tr.querySelectorAll('td')).map(td => td.innerText.trim());
        rows.push(cells);
      });
      downloadCsv('hosts.csv', rows);
    });
  }
})();

function syncChipState(button, on) {
  if (!button) return;
  if (on) {
    button.classList.add('btn-primary');
    button.classList.remove('btn-ghost');
  } else {
    button.classList.remove('btn-primary');
    button.classList.add('btn-ghost');
  }
}
function setupTableFilter({ table, searchInput, statusButtons, issuesToggle }) {
  if (!table) return;
  const rows = Array.from(table.querySelectorAll('tbody tr'));
  const activeStatuses = new Set(statusButtons && statusButtons.length ? statusButtons.map(btn => btn.dataset.status) : []);
  if (statusButtons && statusButtons.length) {
    statusButtons.forEach(btn => {
      syncChipState(btn, true);
      btn.addEventListener('click', () => {
        const status = btn.dataset.status;
        if (activeStatuses.has(status)) {
          activeStatuses.delete(status);
          syncChipState(btn, false);
        } else {
          activeStatuses.add(status);
          syncChipState(btn, true);
        }
        if (activeStatuses.size === 0) {
          statusButtons.forEach(other => {
            activeStatuses.add(other.dataset.status);
            syncChipState(other, true);
          });
        }
        applyFilters();
      });
    });
  }
  if (searchInput) searchInput.addEventListener('input', applyFilters);
  if (issuesToggle) issuesToggle.addEventListener('change', applyFilters);
  applyFilters();
  function applyFilters() {
    const query = (searchInput && searchInput.value || '').toLowerCase().trim();
    const terms = query ? query.split(/\s+/).filter(Boolean) : [];
    const issuesOnly = !!(issuesToggle && issuesToggle.checked);
    rows.forEach(row => {
      const rowStatus = row.getAttribute('data-status');
      const rowIssue = row.getAttribute('data-issue') === '1';
      let visible = true;
      if (statusButtons && statusButtons.length && rowStatus && !activeStatuses.has(rowStatus)) visible = false;
      if (issuesOnly && !rowIssue) visible = false;
      if (visible && terms.length) {
        const haystack = row.innerText.toLowerCase();
        visible = terms.every(term => haystack.includes(term));
      }
      row.style.display = visible ? '' : 'none';
    });
  }
}
function downloadCsv(filename, rows) {
  const csv = rows.map(row => row.map(cell => {
    if (cell == null) return '';
    const value = String(cell).replace(/"/g, '""');
    return /[",\n]/.test(value) ? `"${value}"` : value;
  }).join(',')).join('\n');
  const blob = new Blob([csv], { type: 'text/csv' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  link.click();
  setTimeout(() => URL.revokeObjectURL(url), 1000);
}
</script>