{
  "bin/mtemp": "#!/usr/bin/env bash\n# Minimal wrapper for mktemp used by hype_run.\n# Pass-through to system mktemp with same arguments.\nexec mktemp \"$@\"\n\n",
  "bin/bat": "#!/usr/bin/env bash\nset -euo pipefail\n. \"$(cd \"$(dirname \"$0\")\" && pwd)/_lib.sh\"\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/bat\" \\\n  \"$TOOLS_DIR/bat/bat\" \\\n  bat \\\n  batcat\n\necho \"❌ bat not available; ensure devDeps installed or provide a system 'bat'.\" >&2\nexit 127\n",
  "bin/tree": "#!/usr/bin/env bash\nset -euo pipefail\n. \"$(cd \"$(dirname \"$0\")\" && pwd)/_lib.sh\"\n\n# Prefer npm-provided tree-cli, then repo cache, then system\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/tree\" \\\n  \"$TOOLS_DIR/tree/tree\" \\\n  tree\n\necho \"❌ tree not available; ensure devDeps are installed or provide a system 'tree'.\" >&2\nexit 127\n",
  "bin/_lib.sh": "#!/usr/bin/env bash\nset -euo pipefail\nREPO_ROOT=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")/..\" && pwd)\"\nTOOLS_DIR=\"$REPO_ROOT/.tools\"\n\ncan_sudo() {\n  command -v sudo >/dev/null 2>&1 && sudo -n true >/dev/null 2>&1\n}\n\napt_install() {\n  local pkg=\"${1:-}\"\n  [[ -z \"$pkg\" ]] && return 1\n  if can_sudo; then\n    sudo apt-get update -y && sudo apt-get install -y \"$pkg\"\n  else\n    return 1\n  fi\n}\n\nretry_exec() {\n  local args=()\n  while [[ $# -gt 0 ]]; do\n    case \"$1\" in\n      --) shift; break;;\n      *) args+=(\"$1\"); shift;;\n    esac\n  done\n  local candidates=(\"$@\")\n  for c in \"${candidates[@]}\"; do\n    if [[ -x \"$c\" ]]; then exec \"$c\" \"${args[@]}\"; fi\n    if command -v \"$c\" >/dev/null 2>&1; then exec \"$c\" \"${args[@]}\"; fi\n  done\n  return 1\n}\n",
  "bin/npm": "#!/usr/bin/env bash\n# Repo-local npm shim: inject keepalive for npm test invocations.\nset -euo pipefail\norig_args=(\"$@\")\nif [[ \"${1:-}\" == \"test\" ]] || { [[ \"${1:-}\" == \"run\" ]] && [[ \"${2:-}\" == \"test\" ]]; }; then\n  export NODE_OPTIONS=\"${NODE_OPTIONS:-} --import=./test/setup/llm-keepalive.mjs\"\nfi\nREAL_NPM=\"$(command -v -a npm | awk 'NR==2{print;exit}')\"\nexec \"${REAL_NPM:-/usr/bin/npm}\" \"${orig_args[@]}\"\n",
  "bin/fd": "#!/usr/bin/env bash\n# fd shim — autonomous, non-hijacking repairs for LLM-driven invocations\n# - ONLY rewrites CLI args and execs fd (no piping, no post-processing)\n# - Fixed safe defaults (no env toggles): max-depth=6, one-file-system, color=never\n# - Removes/transforms exec modes (-x / -X) into safe listing and emits diagnostics to stderr\n# - Conservative: warns visibly about hidden/no-ignore/follow-symlink requests\nset -Eeuo pipefail\n. \"$(cd \"$(dirname \"$0\")\" && pwd)/_lib.sh\"\n\n_find_fd() {\n  local c\n  for c in \\\n    \"$REPO_ROOT/node_modules/.bin/fd\" \\\n    \"$REPO_ROOT/node_modules/.bin/fdfind\" \\\n    \"$TOOLS_DIR/fd/fd\" \\\n    /usr/bin/fd \\\n    /usr/local/bin/fd \\\n    \"$(command -v fd 2>/dev/null || true)\" \\\n    \"$(command -v fdfind 2>/dev/null || true)\"\n  ; do\n    [[ -n \"${c}\" && -x \"${c}\" ]] && { printf '%s\\n' \"$c\"; return 0; }\n  done\n  return 1\n}\n\nFD_BIN=\"$(_find_fd)\" || {\n  echo \"❌ fd not available; ensure devDeps installed or provide a system 'fd'.\" >&2\n  exit 127\n}\n\n# ---------- fixed safety knobs (no env toggles) ----------\nSAFE_MAX_DEPTH=6          # limit directory recursion to reduce scan blast radius\nINJECTED_FLAGS=( --max-depth \"$SAFE_MAX_DEPTH\" --one-file-system --color=never )\n\n# ---------- parse & repair arguments ----------\norig=( \"$@\" )\nsanitized=()\nshow_change=0\n# capture whether user explicitly requested JSON-like machine mode (fd has no JSON, but -0 indicates pipe intent)\nhas_print0=0\n# We will remove -x/-X (exec) as an automatic hardening step (transformed to safe listing).\n# We will preserve -0/--print0 when present (used for safe piping).\ni=0\nwhile (( i < ${#orig[@]} )); do\n  a=\"${orig[i]}\"\n  case \"$a\" in\n    -x|--exec)\n      # per fd docs -x executes command per result (parallel); risky to let an LLM craft destructive commands\n      printf '%s\\n' \"fd-shim: removed exec flag '-x/--exec' for safety; invocation will only list matches. If you intended to run commands, run them explicitly after review.\" >&2\n      show_change=1\n      # skip template tokens until semicolon-terminated or end-of-args:\n      # fd -x cmd {} \\;  OR fd -x cmd {} ';'  OR fd -x sh -c '...' etc. We conservatively skip next token if it's not starting with '-' (best-effort).\n      # In practice we drop the flag and any immediate token that looks like the command (best-effort).\n      if (( i+1 < ${#orig[@]} )); then\n        # skip one following token (command template); cannot robustly parse arbitrary templates without execing - so we drop one token safely.\n        ((i++))\n      fi\n      ;;\n    -X|--exec-batch)\n      printf '%s\\n' \"fd-shim: removed batch-exec flag '-X/--exec-batch' to avoid passing many paths into external commands. Listing only.\" >&2\n      show_change=1\n      # if a command token follows, skip one token to avoid misinterpreting it as a path later\n      if (( i+1 < ${#orig[@]} )); then ((i++)); fi\n      ;;\n    -H|--hidden)\n      # visible request to include hidden files; allowed but warn because it increases output surface\n      printf '%s\\n' \"fd-shim: warning: '--hidden' requested; scanning hidden files (this may increase result size).\" >&2\n      show_change=1\n      sanitized+=( \"$a\" )\n      ;;\n    -I|--no-ignore)\n      # show-danger but honor; scanning ignored files can include node_modules etc. keep but warn\n      printf '%s\\n' \"fd-shim: warning: '--no-ignore' requested; ignoring .gitignore/.fdignore (this may include large paths like node_modules).\" >&2\n      show_change=1\n      sanitized+=( \"$a\" )\n      ;;\n    -L|--follow)\n      # following symlinks can traverse outside repo or create loops; warn but allow with max-depth enforced\n      printf '%s\\n' \"fd-shim: warning: '--follow' requested; symlinks will be followed but traversal depth is limited to ${SAFE_MAX_DEPTH}.\" >&2\n      show_change=1\n      sanitized+=( \"$a\" )\n      ;;\n    -0|--print0)\n      has_print0=1\n      sanitized+=( \"$a\" )\n      ;;\n    --color=*)\n      # canonicalize color: we will set --color=never; skip user color flags in sanitized list\n      printf '%s\\n' \"fd-shim: normalizing color output to --color=never for deterministic results.\" >&2\n      show_change=1\n      ;;\n    --help|--version|-h|-V)\n      # pass trivial flags through untouched\n      sanitized+=( \"$a\" )\n      ;;\n    *)\n      sanitized+=( \"$a\" )\n      ;;\n  esac\n  ((i++))\ndone\n\n# build final args: inject safety flags unless user explicitly used --print0 (we still inject)\nfinal_args=()\nfinal_args+=( \"${INJECTED_FLAGS[@]}\" )\nfinal_args+=( \"${sanitized[@]}\" )\n\nif [[ \"$show_change\" -eq 1 ]]; then\n  printf '%s\\n' \"fd-shim: executing fd with safe defaults (max-depth=${SAFE_MAX_DEPTH}, one-file-system, color=never).\" >&2\nfi\n\n# exec the real fd; no post-processing, no piping; shim only rewrites CLI\nexec \"${FD_BIN}\" \"${final_args[@]}\"\n",
  "bin/prettier": "#!/usr/bin/env bash\nset -euo pipefail\nREPO_ROOT=\"$(cd \"$(dirname \"$0\")/..\" && pwd)\"\nBIN_LOCAL=\"$REPO_ROOT/node_modules/.bin/prettier\"\n\n# Ensure local devDependency exists (non‑interactive idempotent install)\nif [[ ! -x \"$BIN_LOCAL\" ]]; then\n  if command -v npm >/dev/null 2>&1; then\n    echo \"📦 Installing prettier (devDependency)...\" >&2\n    # Pin major to 3 for stability; exact patch can float via lockfile.\n    npm install --save-dev --save-exact prettier@3 >/dev/null 2>&1 || true\n  fi\nfi\n\nif [[ -x \"$BIN_LOCAL\" ]]; then\n  exec \"$BIN_LOCAL\" \"$@\"\nfi\n\n# Fallback to global (if present)\nif command -v prettier >/dev/null 2>&1; then\n  exec prettier \"$@\"\nfi\n\necho \"❌ prettier not available and local install failed. Ensure npm is usable or preinstall devDeps.\" >&2\nexit 127\n",
  "bin/rg": "#!/usr/bin/env bash\n# rg shim — autonomously repair/soften dangerous flags so rg emits safe output.\n# - DOES NOT pipe or post-process rg output. Only rewrites CLI args and execs rg.\n# - Fixed safety values (no env toggles): max-columns=4000, max-filesize=10M, dfa/regex caps, line-buffered.\nset -Eeuo pipefail\n. \"$(cd \"$(dirname \"$0\")\" && pwd)/_lib.sh\"\n\n_find_rg() {\n  local c\n  for c in \\\n    \"$REPO_ROOT/node_modules/.bin/rg\" \\\n    \"$REPO_ROOT/node_modules/.bin/ripgrep\" \\\n    \"$TOOLS_DIR/rg/rg\" \\\n    /usr/bin/rg \\\n    /usr/local/bin/rg \\\n    \"$(command -v rg 2>/dev/null || true)\"\n  ; do\n    [[ -n \"${c}\" && -x \"${c}\" ]] && { printf '%s\\n' \"$c\"; return 0; }\n  done\n  return 1\n}\n\nRG_BIN=\"$(_find_rg)\" || {\n  echo \"❌ ripgrep (rg) not available; install or provide 'rg' on PATH.\" >&2\n  exit 127\n}\n\n# ---------- fixed safety knobs (no env toggles) ----------\nMAX_COLUMNS=4000      # keep below typical PIPE_BUF (4096) to avoid huge atomic writes\nMAX_FILESIZE=10M\nDFA_LIMIT=10M\nREGEX_LIMIT=8M\n# These flags will always be injected (unless user requested --json)\nINJECTED_FLAGS=( \\\n  --max-columns \"$MAX_COLUMNS\" \\\n  --max-columns-preview \\\n  --max-filesize \"$MAX_FILESIZE\" \\\n  --dfa-size-limit \"$DFA_LIMIT\" \\\n  --regex-size-limit \"$REGEX_LIMIT\" \\\n  --line-buffered \\\n  --no-heading \\\n  --color=never \\\n)\n\n# ---------- argument parse & autonomous repair ----------\norig=( \"$@\" )\nsanitized=()\nshowed_change=0\n# We will keep --json untouched (machine outputs should not be modified).\nfor ((i=0;i<${#orig[@]};i++)); do\n  a=\"${orig[i]}\"\n\n  case \"$a\" in\n    --pre|--pre=*)\n      # --pre runs per-file preprocessors (can spawn many processes / huge io). Remove but inform.\n      printf '%s\\n' \"rg-shim: removed risky flag '--pre*' to avoid per-file preprocessors; proceeding without it.\" >&2\n      showed_change=1\n      # drop the whole token; if next token is value and this was space-separated form, also drop\n      if [[ \"$a\" == \"--pre\" ]]; then\n        # skip the next token if present\n        ((i++))\n      fi\n      ;;\n    --pre-glob|--pre-glob=*)\n      printf '%s\\n' \"rg-shim: removed '--pre-glob*' (works with --pre) to avoid wide preprocessor dispatch.\" >&2\n      showed_change=1\n      if [[ \"$a\" == \"--pre-glob\" ]]; then ((i++)); fi\n      ;;\n    --passthru)\n      # --passthru would output both matching and non-matching lines verbatim (can be huge)\n      printf '%s\\n' \"rg-shim: removed '--passthru' to avoid unbounded file output; running normal search instead.\" >&2\n      showed_change=1\n      ;;\n    -a|--text)\n      # -a treats binaries as text — can dump binary gibberish.\n      printf '%s\\n' \"rg-shim: removed '-a/--text' (binary-as-text). Keeping binary detection and a file-size cap instead.\" >&2\n      showed_change=1\n      ;;\n    --color=always|--color=auto|--color=never)\n      # normalize color to never to avoid SGR escape noise in LLM contexts (deterministic).\n      printf '%s\\n' \"rg-shim: overriding color flags to --color=never for stable output.\" >&2\n      showed_change=1\n      # do not append user's color flag; we'll append our canonical color later\n      ;;\n    --json)\n      # keep JSON untouched; do not inject max-columns because JSON output is machine-format\n      sanitized+=( \"$a\" )\n      ;;\n    --help|--version|-h|--version)\n      # pass help/version straight through without changes\n      sanitized+=( \"$a\" )\n      ;;\n    *)\n      sanitized+=( \"$a\" )\n      ;;\n  esac\ndone\n\n# If user asked for --json, do not inject formatting flags that alter textual output semantics.\ninject_formatting=1\nfor tok in \"${sanitized[@]}\"; do\n  if [[ \"$tok\" == \"--json\" ]]; then inject_formatting=0; break; fi\ndone\n\n# Build final argv\nfinal_args=()\nif [[ \"$inject_formatting\" -eq 1 ]]; then\n  final_args+=( \"${INJECTED_FLAGS[@]}\" )\nfi\n# append the user's (sanitized) arguments\nfinal_args+=( \"${sanitized[@]}\" )\n\n# If we removed/modified things, show a short summary that an LLM/human can see.\nif [[ \"$showed_change\" -eq 1 ]]; then\n  printf '%s\\n' \"rg-shim: executed with safe defaults (max-columns=${MAX_COLUMNS}, max-filesize=${MAX_FILESIZE}, dfa=${DFA_LIMIT}, regex=${REGEX_LIMIT}, line-buffered).\" >&2\nfi\n\n# Final exec -> do not pipe, do not post-process; hand control to rg with repaired args.\nexec \"${RG_BIN}\" \"${final_args[@]}\"\n",
  "bin/shtap": "#!/usr/bin/env bash\nset -Eeuo pipefail\nplan(){ echo \"1..$1\"; }\nok(){ local c=\"$1\"; shift; echo \"ok $c - $*\"; }\nnot_ok(){ local c=\"$1\"; shift; echo \"not ok $c - $*\"; }\nexpect(){ local idx=\"$1\"; shift; eval \"$@\" && ok \"$idx\" \"$*\" || { not_ok \"$idx\" \"$*\"; exit 1; }; }\n",
  "bin/yq": "#!/usr/bin/env bash\nset -euo pipefail\n. \"$(cd \"$(dirname \"$0\")\" && pwd)/_lib.sh\"\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/yq\" \\\n  \"$TOOLS_DIR/yq/yq\" \\\n  yq\n\nif [[ ! -x \"$TOOLS_DIR/yq/yq\" ]]; then\n  mkdir -p \"$TOOLS_DIR/yq\"\n  url=\"https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64\"\n  echo \"⬇️  Downloading yq static build...\" >&2\n  curl -fsSL \"$url\" -o \"$TOOLS_DIR/yq/yq\" && chmod +x \"$TOOLS_DIR/yq/yq\"\nfi\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/yq\" \\\n  \"$TOOLS_DIR/yq/yq\"\n\necho \"❌ yq not available; ensure devDeps installed.\" >&2\nexit 127\n",
  "bin/node": "#!/usr/bin/env bash\nset -euo pipefail\nDIR=\"$(cd \"$(dirname \"$0\")\" && pwd)\"\nPATH_WITHOUT_DIR=$(printf \"%s\" \"$PATH\" | sed \"s|$DIR:||;s|:$DIR||;s|$DIR||\")\nREAL_NODE=\"$(PATH=\"$PATH_WITHOUT_DIR\" command -v node)\"\nif [ -z \"$REAL_NODE\" ]; then\n  echo \"node binary not found\" >&2\n  exit 127\nfi\nexec \"$REAL_NODE\" \"$@\"\n",
  "bin/jq": "#!/usr/bin/env bash\nset -euo pipefail\n. \"$(cd \"$(dirname \"$0\")\" && pwd)/_lib.sh\"\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/jq\" \\\n  \"$TOOLS_DIR/jq/jq\" \\\n  jq\n\nif [[ ! -x \"$TOOLS_DIR/jq/jq\" ]]; then\n  mkdir -p \"$TOOLS_DIR/jq\"\n  url=\"https://github.com/jqlang/jq/releases/latest/download/jq-linux-amd64\"\n  echo \"⬇️  Downloading jq static build...\" >&2\n  curl -fsSL \"$url\" -o \"$TOOLS_DIR/jq/jq\" && chmod +x \"$TOOLS_DIR/jq/jq\"\nfi\n\nretry_exec \"$@\" -- \\\n  \"$REPO_ROOT/node_modules/.bin/jq\" \\\n  \"$TOOLS_DIR/jq/jq\"\n\necho \"❌ jq not available; ensure devDeps installed.\" >&2\nexit 127\n"
}
